/*
 * SPDX-FileCopyrightText: 2019 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.bpe.execution.model;

import static com.top_logic.model.search.expr.SearchExpressionFactory.*;

import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import com.top_logic.base.services.simpleajax.HTMLFragment;
import com.top_logic.basic.StringServices;
import com.top_logic.basic.util.ResKey;
import com.top_logic.bpe.bpml.model.Lane;
import com.top_logic.bpe.bpml.model.ManualTask;
import com.top_logic.bpe.bpml.model.Node;
import com.top_logic.bpe.bpml.model.Participant;
import com.top_logic.bpe.bpml.model.Process;
import com.top_logic.bpe.bpml.model.SubProcess;
import com.top_logic.bpe.bpml.model.Task;
import com.top_logic.bpe.execution.engine.ExecutionEngine;
import com.top_logic.bpe.execution.model.impl.TokenBase;
import com.top_logic.contact.business.PersonContact;
import com.top_logic.knowledge.service.Revision;
import com.top_logic.knowledge.wrap.WrapperHistoryUtils;
import com.top_logic.knowledge.wrap.person.Person;
import com.top_logic.layout.basic.fragments.Fragments;
import com.top_logic.model.search.expr.SearchExpression;
import com.top_logic.model.search.expr.query.ExpressionFragment;

/**
 * Interface for {@link #TOKEN_TYPE} business objects.
 * 
 * @author Automatically generated by {@link com.top_logic.element.model.generate.InterfaceTemplateGenerator}
 */
public interface Token extends TokenBase {

	/**
	 * is the {@link Token} actual active?
	 */
	default boolean calculateActive() {
		ProcessExecution pe = getProcessExecution();
		if (pe == null) {
			return false;
		}
		return pe.getActiveTokens().contains(this);
	}

	/**
	 * only an active token can be user relevant
	 * 
	 * @return true iff is the token active an is the node of it a {@link Task}
	 */
	default boolean calculateUserRelevant() {
		return (getNode() instanceof ManualTask) && getActive();
	}

	/**
	 * duration of the token in minutes
	 */
	default long calculateDurationInMinutes() {
		Date created = tCreationDate();
		Date finished = getFinishDate();
		if (finished == null) {
			finished = new Date();
		}
		long duration = finished.getTime() - created.getTime();
		return duration / 1000 / 60;
	}

	/**
	 * This method is called by the security system when a token is created.
	 * 
	 * @return a collection with the persons which may act as actor for this token
	 */
	default Collection<Person> calculateDynamicActors() {
		Node node = getNode();
		if (node == null) {
			return null;
		}

		Lane lane = node.getLane();
		if (lane == null) {
			return null;
		}

		SearchExpression personRule = lane.getActorRule();
		if (personRule == null) {
			return null;
		}

		ProcessExecution pe = getProcessExecution();
		if (pe == null) {
			return null;
		}
		Object calculate = ExecutionEngine.getInstance().calculate(personRule, pe);
		Set<Person> res = asPersonCollection(calculate);
		if (res.isEmpty()) {
			return null;
		}
		return res;
	}

	private Set<Person> asPersonCollection(Object obj) {
		Set<Person> res = new HashSet<>();
		if (obj instanceof Collection) {
			for (Object inner : (Collection<?>) obj) {
				addPersonIfPossible(res, inner);
			}
		} else {
			addPersonIfPossible(res, obj);
		}
		return res;
	}

	private void addPersonIfPossible(Set<Person> res, Object inner) {
		if (inner instanceof PersonContact) {
			Person person = ((PersonContact) inner).getPerson();
			if (person != null) {
				res.add(person);
			}
		} else if (inner instanceof Person) {
			res.add((Person) inner);
		}
	}

	/**
	 * Computes the label for this {@link Token}.
	 */
	default HTMLFragment calculateLabelFragment() {
		Revision createRevision = WrapperHistoryUtils.getCreateRevision(this);
		Token tokenInCreateRevision = WrapperHistoryUtils.getWrapper(createRevision, this);
		return calculateLabelFragment(tokenInCreateRevision);
	}

	private static HTMLFragment calculateLabelFragment(Token token) {
		Node node = token.getNode();
		if (node instanceof Task) {
			SearchExpression labelFunction = ((Task) node).getLabelFunction();
			if (labelFunction != null) {
				return new ExpressionFragment(
					call(labelFunction, literal(token.getProcessExecution()), literal(token.getNode()),
						literal(token)));
			}

			ResKey label = ((Task) node).getLabel();
			if (label != null) {
				return Fragments.message(label);
			}
		}
		SearchExpression titleTemplate = token.participant(node.getProcess()).getTaskLabel();
		if (titleTemplate != null) {
			return new ExpressionFragment(
				call(titleTemplate, literal(token.getProcessExecution()), literal(token.getNode()),
					literal(token)));
		}

		String name = node.getName();
		if (!StringServices.isEmpty(name)) {
			return Fragments.text(name);
		}

		return null;
	}

	private Participant participant(Process process) {
		if (process instanceof SubProcess) {
			return participant(((SubProcess) process).getProcess());
		} else {
			return process.getParticipant();
		}
	}

}
