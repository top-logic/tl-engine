/* HTMLTemplateParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. HTMLTemplateParserTokenManager.java */
/*
 * SPDX-FileCopyrightText: 2018 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.html.template.parser;

/** Token Manager. */
@SuppressWarnings ("unused")
public class HTMLTemplateParserTokenManager implements HTMLTemplateParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffc0L) != 0L)
            return 31;
         return -1;
      case 1:
         if ((active0 & 0x15680L) != 0L)
            return 43;
         if ((active0 & 0xa940L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
            return 57;
         }
         return -1;
      case 2:
         if ((active0 & 0xa940L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
            return 57;
         }
         if ((active0 & 0x15680L) != 0L)
            return 58;
         return -1;
      case 3:
         if ((active0 & 0xa940L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 17;
               jjmatchedPos = 2;
            }
            return 4;
         }
         if ((active0 & 0x15680L) != 0L)
            return 58;
         return -1;
      case 4:
         if ((active0 & 0x15680L) != 0L)
            return 46;
         if ((active0 & 0xa940L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 4;
            return 5;
         }
         return -1;
      case 5:
         if ((active0 & 0xa900L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 5;
            return 5;
         }
         if ((active0 & 0x15680L) != 0L)
            return 59;
         if ((active0 & 0x40L) != 0L)
            return 5;
         return -1;
      case 6:
         if ((active0 & 0xa900L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
            return 5;
         }
         if ((active0 & 0x15680L) != 0L)
            return 59;
         return -1;
      case 7:
         if ((active0 & 0x8900L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 7;
            return 5;
         }
         if ((active0 & 0x2000L) != 0L)
            return 5;
         if ((active0 & 0x15600L) != 0L)
            return 59;
         return -1;
      case 8:
         if ((active0 & 0x900L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 8;
            return 5;
         }
         if ((active0 & 0x15600L) != 0L)
            return 59;
         return -1;
      case 9:
         if ((active0 & 0x900L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 9;
            return 5;
         }
         if ((active0 & 0x1400L) != 0L)
            return 59;
         return -1;
      case 10:
         if ((active0 & 0x800L) != 0L)
            return 5;
         if ((active0 & 0x1400L) != 0L)
            return 59;
         return -1;
      case 11:
         if ((active0 & 0x1400L) != 0L)
            return 59;
         return -1;
      case 12:
         if ((active0 & 0x400L) != 0L)
            return 59;
         return -1;
      case 13:
         if ((active0 & 0x400L) != 0L)
            return 59;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_0(0x1ffc0L);
      case 123:
         return jjStopAtPos(0, 5);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x15680L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xa940L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xa940L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x15680L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa4_0(active0, 0xa940L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x15680L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa5_0(active0, 0x15680L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 102:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2080L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x4200L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1100L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x2400L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(7, 7);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0xa00L);
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 5);
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0xc000L);
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(8, 15);
         break;
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x1400L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(9, 9);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(9, 14);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(9, 16);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(10, 8);
         break;
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 104:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(10, 11, 5);
         break;
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(12, 12);
         break;
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(14, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x5e00000000ffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec7 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff00000000ffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 57;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xefffffbfffffffffL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     { jjCheckNAddTwoStates(6, 7); }
                  }
                  else if (curChar == 38)
                     { jjAddStates(0, 1); }
                  else if (curChar == 60)
                     { jjAddStates(2, 4); }
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 57:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     { jjCheckNAddTwoStates(2, 3); }
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 59:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  else if (curChar == 62)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  break;
               case 58:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  else if (curChar == 62)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 31:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 3:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if ((0xefffffbfffffffffL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 9:
                  if (curChar != 60)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 10:
                  if (curChar != 38)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 13:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(8, 9); }
                  break;
               case 16:
                  if (curChar == 59 && kind > 23)
                     kind = 23;
                  break;
               case 17:
                  if (curChar == 60)
                     { jjAddStates(2, 4); }
                  break;
               case 18:
                  if (curChar == 45)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 19:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 20:
                  if (curChar == 45)
                     { jjCheckNAdd(19); }
                  break;
               case 21:
                  if (curChar == 45)
                     { jjAddStates(13, 15); }
                  break;
               case 22:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 24:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 26:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if (curChar == 62 && kind > 2)
                     kind = 2;
                  break;
               case 28:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 32:
                  if (curChar == 45)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 33:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 34:
                  if (curChar == 45)
                     { jjCheckNAdd(33); }
                  break;
               case 35:
                  if (curChar == 45)
                     { jjAddStates(19, 20); }
                  break;
               case 36:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 38:
                  if (curChar == 62 && kind > 4)
                     kind = 4;
                  break;
               case 39:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 41:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 44:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 45:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 48:
                  if (curChar == 62 && kind > 18)
                     kind = 18;
                  break;
               case 49:
                  if (curChar == 38)
                     { jjAddStates(0, 1); }
                  break;
               case 50:
                  if (curChar == 35)
                     { jjCheckNAdd(51); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(51, 52); }
                  break;
               case 52:
                  if (curChar == 59 && kind > 24)
                     kind = 24;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(21, 22); }
                  break;
               case 55:
                  if (curChar == 59 && kind > 25)
                     kind = 25;
                  break;
               case 56:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     { jjCheckNAddTwoStates(6, 7); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(23, 27); }
                  break;
               case 57:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 59:
               case 47:
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 58:
               case 44:
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 4:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAdd(5); }
                  break;
               case 6:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 7:
                  if (curChar == 92)
                     { jjAddStates(23, 27); }
                  break;
               case 8:
                  if (curChar != 92)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 11:
                  if (curChar != 123)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 12:
                  if (curChar != 125)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 14:
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 19:
               case 23:
               case 25:
                  { jjCheckNAddStates(10, 12); }
                  break;
               case 33:
               case 37:
                  { jjCheckNAddStates(16, 18); }
                  break;
               case 53:
                  if (curChar == 120)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 6:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 57:
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 59:
               case 47:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 58:
               case 44:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 31:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAdd(5); }
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 15:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 19:
               case 23:
               case 25:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 33:
               case 37:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 43:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 46:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 57 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x70000000000L) != 0L)
         {
            jjmatchedKind = 45;
            return 10;
         }
         return -1;
      case 1:
         if ((active0 & 0x70000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
            return 10;
         }
         return -1;
      case 2:
         if ((active0 & 0x70000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
            return 10;
         }
         return -1;
      case 3:
         if ((active0 & 0x50000000000L) != 0L)
            return 10;
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
            return 10;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_2(0x20000000000000L);
      case 34:
         return jjStopAtPos(0, 50);
      case 37:
         return jjStopAtPos(0, 62);
      case 40:
         return jjStopAtPos(0, 66);
      case 41:
         return jjStopAtPos(0, 67);
      case 42:
         return jjStopAtPos(0, 60);
      case 43:
         return jjStopAtPos(0, 58);
      case 45:
         return jjStopAtPos(0, 59);
      case 46:
         return jjStopAtPos(0, 63);
      case 47:
         return jjStopAtPos(0, 61);
      case 58:
         return jjStopAtPos(0, 48);
      case 60:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_2(0x80000000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_2(0x10000000000000L);
      case 62:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_2(0x40000000000000L);
      case 63:
         return jjStopAtPos(0, 47);
      case 91:
         return jjStopAtPos(0, 64);
      case 93:
         return jjStopAtPos(0, 65);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x20000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x40000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x10000000000L);
      case 125:
         return jjStopAtPos(0, 49);
      default :
         return jjMoveNfa_2(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x20000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x10000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x60000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 40, 10);
         break;
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 42, 10);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 41, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_2(3, active0, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 19;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAddTwoStates(15, 12); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(17, 18); }
                  else if (curChar == 48)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAdd(12); }
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 38 && kind > 43)
                     kind = 43;
                  break;
               case 4:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 11:
                  if (curChar != 48)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAdd(12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAdd(13); }
                  break;
               case 14:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddTwoStates(15, 12); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddTwoStates(15, 12); }
                  break;
               case 16:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 17:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  if (curChar == 39 && kind > 68)
                     kind = 68;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (curChar == 100 && kind > 43)
                     kind = 43;
                  break;
               case 1:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 5:
                  if (curChar == 114 && kind > 44)
                     kind = 44;
                  break;
               case 6:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 124 && kind > 44)
                     kind = 44;
                  break;
               case 8:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAdd(10); }
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjAddStates(28, 29); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 19 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_1(0xe00000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0xc00000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0xc00000000L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa4_1(active0, 0xc00000000L);
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000L);
      case 119:
         return jjMoveStringLiteralDfa5_1(active0, 0x400000000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_1(active0, 0x200000000L);
      case 104:
         return jjMoveStringLiteralDfa6_1(active0, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa6_1(active0, 0x800000000L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_1(active0, 0x400000000L);
      case 104:
         return jjMoveStringLiteralDfa7_1(active0, 0xa00000000L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_1(active0, 0x800000000L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(7, 34);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0x200000000L);
      default :
         return 8;
   }
   return 8;
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x200000000L);
      case 114:
         return jjMoveStringLiteralDfa9_1(active0, 0x800000000L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa10_1(active0, 0x200000000L);
      case 119:
         return jjMoveStringLiteralDfa10_1(active0, 0x800000000L);
      default :
         return 10;
   }
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_1(active0, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa11_1(active0, 0x800000000L);
      default :
         return 11;
   }
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(11, 33);
         break;
      case 115:
         return jjMoveStringLiteralDfa12_1(active0, 0x800000000L);
      default :
         return 12;
   }
   return 12;
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa13_1(active0, 0x800000000L);
      default :
         return 13;
   }
}
private int jjMoveStringLiteralDfa13_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(13, 35);
         break;
      default :
         return 14;
   }
   return 14;
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1){
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 100);
      case 123:
         return jjStopAtPos(0, 99);
      default :
         return jjMoveNfa_6(7, 0);
   }
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 19;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0xffffffbbffffffffL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  else if (curChar == 38)
                     { jjAddStates(30, 31); }
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 0:
                  if ((0xffffffbbffffffffL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 3:
                  if (curChar != 34)
                     break;
                  kind = 101;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 4:
                  if (curChar != 38)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 9:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(32, 33); }
                  break;
               case 10:
                  if (curChar == 59 && kind > 102)
                     kind = 102;
                  break;
               case 11:
                  if (curChar == 38)
                     { jjAddStates(30, 31); }
                  break;
               case 12:
                  if (curChar == 35)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 14:
                  if (curChar == 59 && kind > 103)
                     kind = 103;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(34, 35); }
                  break;
               case 17:
                  if (curChar == 59 && kind > 104)
                     kind = 104;
                  break;
               case 18:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(36, 40); }
                  break;
               case 0:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 1:
                  if (curChar == 92)
                     { jjAddStates(36, 40); }
                  break;
               case 2:
                  if (curChar != 92)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 5:
                  if (curChar != 123)
                     break;
                  kind = 101;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 6:
                  if (curChar != 125)
                     break;
                  kind = 101;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 8:
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 15:
                  if (curChar == 120)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
               case 0:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 9:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 19 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 79;
            return 5;
         }
         return -1;
      case 1:
         if ((active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 1;
            return 5;
         }
         return -1;
      case 2:
         if ((active1 & 0x600L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 79;
               jjmatchedPos = 1;
            }
            return 3;
         }
         return -1;
      case 3:
         if ((active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 3;
            return 4;
         }
         return -1;
      case 4:
         if ((active1 & 0x200L) != 0L)
            return 4;
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
            return 4;
         }
         return -1;
      case 5:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
            return 4;
         }
         return -1;
      case 6:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 6;
            return 4;
         }
         return -1;
      case 7:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
            return 4;
         }
         return -1;
      case 8:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 8;
            return 4;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 76);
      case 47:
         return jjMoveStringLiteralDfa1_3(0x4000L);
      case 61:
         return jjStopAtPos(0, 75);
      case 62:
         return jjStopAtPos(0, 77);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x600L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 108:
         return jjMoveStringLiteralDfa2_3(active1, 0x600L);
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa3_3(active1, 0x600L);
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa4_3(active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa4_3(active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_3(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 102:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_3(4, 73, 4);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_3(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_3(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa6_3(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_3(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_3(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_3(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_3(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_3(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_3(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_3(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 104:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_3(9, 74, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_3(8, 0L, active1);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 1:
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 3:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAdd(4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAdd(4); }
                  break;
               case 4:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAdd(4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 97);
      case 61:
         return jjStopAtPos(0, 96);
      case 62:
         return jjStopAtPos(0, 98);
      case 100:
         return jjMoveStringLiteralDfa1_5(0x80000000L);
      case 101:
         return jjMoveStringLiteralDfa1_5(0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa1_5(0x20000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_5(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_5(active1, 0xa0000000L);
      case 108:
         return jjMoveStringLiteralDfa2_5(active1, 0x40000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_5(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_5(active1, 0x40000000L);
      case 102:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 95);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_5(active1, 0x20000000L);
      default :
         return 3;
   }
   return 3;
}
private int jjMoveStringLiteralDfa3_5(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa4_5(active1, 0x40000000L);
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 93);
         break;
      default :
         return 4;
   }
   return 4;
}
private int jjMoveStringLiteralDfa4_5(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_5(active1, 0x40000000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_5(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa6_5(active1, 0x40000000L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_5(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa7_5(active1, 0x40000000L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_5(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 115:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(7, 94);
         break;
      default :
         return 8;
   }
   return 8;
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 88);
      case 61:
         return jjStopAtPos(0, 87);
      default :
         return 1;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\173", "\74\164\154\72\151\146", 
"\74\57\164\154\72\151\146\76", "\74\164\154\72\143\150\157\157\163\145\76", 
"\74\57\164\154\72\167\150\145\156\76", "\74\57\164\154\72\157\164\150\145\162\167\151\163\145\76", 
"\74\164\154\72\146\157\162\145\141\143\150", "\74\57\164\154\72\146\157\162\145\141\143\150\76", 
"\74\164\154\72\167\151\164\150", "\74\57\164\154\72\167\151\164\150\76", "\74\164\154\72\164\145\170\164\76", 
"\74\57\164\154\72\164\145\170\164\76", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\74\57\164\154\72\143\150\157\157\163\145\76", 
"\74\164\154\72\167\150\145\156", "\74\164\154\72\157\164\150\145\162\167\151\163\145\76", null, null, null, 
null, "\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154", null, null, 
null, null, "\77", "\72", "\175", "\42", "\41", "\75\75", "\41\75", "\76\75", 
"\74\75", "\76", "\74", "\53", "\55", "\52", "\57", "\45", "\56", "\133", "\135", "\50", 
"\51", null, null, null, null, null, "\164\154\72\151\146", 
"\164\154\72\146\157\162\145\141\143\150", "\75", "\42", "\76", "\57\76", null, null, null, null, null, null, null, null, 
"\75", "\42", null, null, null, null, "\164\145\163\164", 
"\145\154\145\155\145\156\164\163", "\144\145\146", "\75", "\42", "\76", "\173", "\42", null, null, null, null, 
null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   50, 56, 31, 41, 42, 44, 45, 48, 15, 16, 19, 20, 21, 22, 26, 29, 
   33, 34, 35, 36, 39, 54, 55, 8, 9, 10, 11, 12, 17, 18, 12, 18, 
   9, 10, 16, 17, 2, 3, 4, 5, 6, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec13[i2] & l2) != 0L);
      default :
         if ((jjbitVec7[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public HTMLTemplateParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public HTMLTemplateParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 57; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "CHOOSE",
   "EXPRESSION",
   "TAG",
   "SPECIAL_ATTR",
   "SPECIAL",
   "ATTR_CONTENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 2, 5, -1, 1, 1, 1, 5, -1, 5, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
   -1, 6, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, 0, 2, 
   3, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffff0e0397ffe1L, 0x1ffe180fe1fL, 
};
static final long[] jjtoSkip = {
   0xf1e0000014L, 0x1e7801e0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[57];
    private final int[] jjstateSet = new int[2 * 57];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
