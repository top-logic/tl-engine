/* Generated By:JavaCC: Do not edit this line. SearchExpressionParser.java */
/*
 * SPDX-FileCopyrightText: 2018 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.model.search.expr.parser;

import java.util.List;
import java.util.ArrayList;

import com.top_logic.model.search.expr.config.dom.Expr;
import com.top_logic.model.search.expr.config.dom.Expr.*;
import com.top_logic.model.search.expr.config.dom.ExprFactory;
import com.top_logic.model.search.expr.config.dom.ExprFactory.*;

/**
 * Parser for custom {@link Expr} syntax.
 *
 * @author <a href="mailto:bhu@top-logic.com">Bernhard Haumacher</a>
 */
public class SearchExpressionParser implements SearchExpressionParserConstants {
  private ExprFactory _f = new ExprFactory(this);

  private boolean _checkHtml = true;

  public ExprFactory getFactory() {
        return _f;
  }

  public void setFactory(ExprFactory f) {
        _f = f;
  }

  public void setCheckHtml(boolean checkHtml) {
    _checkHtml = checkHtml;
  }

  final public Expr expr() throws ParseException {
  Expr expr;
  Expr v;
  Token t;
  Args a;
    if (jj_2_1(2147483647)) {
      t = jj_consume_token(NAME);
      jj_consume_token(63);
      v = expr();
      expr=_f.lambda(t.image, v);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case TUPLE:
      case SWITCH:
      case NAME:
      case VAR:
      case STRING:
      case RESKEY:
      case INT:
      case FLOAT:
      case MODULE:
      case TYPE:
      case PART:
      case SINGLETON:
      case BLOCK_START:
      case HTML_START:
      case 73:
      case 77:
      case 78:
      case 81:
      case 85:
        expr = defineExpr();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expr defineExpr() throws ParseException {
  Expr expr;
  Expr thenExpr;
  Expr elseExpr;
    expr = booleanExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
      jj_consume_token(64);
      thenExpr = booleanExpr();
      jj_consume_token(65);
      elseExpr = booleanExpr();
      expr = _f.ifExpr(expr, thenExpr, elseExpr);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expr booleanExpr() throws ParseException {
  Expr expr;
  Expr right;
    expr = orExpr();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
      right = orExpr();
      expr=_f.or(expr, right);
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expr orExpr() throws ParseException {
  Expr expr;
  Expr right;
    expr = andExpr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
      right = andExpr();
      expr=_f.and(expr, right);
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expr andExpr() throws ParseException {
  Expr expr;
  Expr right;
    expr = aditiveExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
        jj_consume_token(66);
        right = aditiveExpr();
                               expr=_f.eq(expr, right);
        break;
      case 67:
        jj_consume_token(67);
        right = aditiveExpr();
                               expr=_f.neq(expr, right);
        break;
      case 68:
        jj_consume_token(68);
        right = aditiveExpr();
                               expr=_f.ge(expr, right);
        break;
      case 69:
        jj_consume_token(69);
        right = aditiveExpr();
                               expr=_f.gt(expr, right);
        break;
      case 70:
        jj_consume_token(70);
        right = aditiveExpr();
                               expr=_f.le(expr, right);
        break;
      case 71:
        jj_consume_token(71);
        right = aditiveExpr();
                               expr=_f.lt(expr, right);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expr aditiveExpr() throws ParseException {
  Expr expr;
  Expr right;
    expr = multiplicativeExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
      case 73:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        jj_consume_token(72);
        right = multiplicativeExpr();
                                       expr=_f.add(expr, right);
        break;
      case 73:
        jj_consume_token(73);
        right = multiplicativeExpr();
                                       expr=_f.sub(expr, right);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expr multiplicativeExpr() throws ParseException {
  Expr expr;
  Expr right;
    expr = negatedExpr();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
      case 75:
      case 76:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        jj_consume_token(74);
        right = negatedExpr();
                                expr=_f.mul(expr, right);
        break;
      case 75:
        jj_consume_token(75);
        right = negatedExpr();
                                expr=_f.div(expr, right);
        break;
      case 76:
        jj_consume_token(76);
        right = negatedExpr();
                                expr=_f.mod(expr, right);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expr negatedExpr() throws ParseException {
  Expr expr;
  Token n;
  Args a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 77:
      jj_consume_token(77);
      expr = accessExpr();
                            expr = _f.not(expr);
      break;
    case 73:
      jj_consume_token(73);
      expr = accessExpr();
                            expr = _f.neg(expr);
      break;
    case TRUE:
    case FALSE:
    case NULL:
    case TUPLE:
    case SWITCH:
    case NAME:
    case VAR:
    case STRING:
    case RESKEY:
    case INT:
    case FLOAT:
    case MODULE:
    case TYPE:
    case PART:
    case SINGLETON:
    case BLOCK_START:
    case HTML_START:
    case 78:
    case 81:
    case 85:
      expr = accessExpr();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expr accessExpr() throws ParseException {
  Expr expr, arg, index;
  Token n;
  Args a;
    expr = atomicExpr();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAIN:
      case ACCESS:
      case 78:
      case 81:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACCESS:
        jj_consume_token(ACCESS);
        n = jj_consume_token(NAME);
        jj_consume_token(78);
        a = args();
        jj_consume_token(79);
        expr=_f.access(expr, _f.method(n.image, a));
        break;
      case CHAIN:
        jj_consume_token(CHAIN);
        n = jj_consume_token(NAME);
        jj_consume_token(78);
        a = args();
        jj_consume_token(79);
        expr=_f.chain(expr, _f.method(n.image, a));
        break;
      case 78:
        jj_consume_token(78);
        arg = expr();
      expr=_f.apply(expr, arg);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 80:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_6;
          }
          jj_consume_token(80);
          arg = expr();
            expr=_f.apply(expr, arg);
        }
        jj_consume_token(79);
        break;
      case 81:
        jj_consume_token(81);
        index = expr();
        jj_consume_token(82);
          expr=_f.at(expr, index);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expr atomicExpr() throws ParseException {
  Expr expr, test, key, value;
  SwitchBuilder sw;
  DictBuilder dict;
  List<Expr> exprs;
  Expr.Tuple.Coord coord;
  List<Expr.Tuple.Coord> coords;
  Token t, l = null;
  Args a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
      expr=_f.nullLiteral();
      break;
    case TRUE:
      jj_consume_token(TRUE);
      expr=_f.trueLiteral();
      break;
    case FALSE:
      jj_consume_token(FALSE);
      expr=_f.falseLiteral();
      break;
    case STRING:
      t = jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LANGTAG:
        l = jj_consume_token(LANGTAG);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      expr=l == null ? _f.stringLiteral(t.image) : _f.i18nBuilder().add(t.image, l.image).build();
      break;
    case RESKEY:
      t = jj_consume_token(RESKEY);
      expr=_f.reskeyLiteral(t.image);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      expr=_f.doubleLiteral(t.image);
      break;
    case INT:
      t = jj_consume_token(INT);
      expr=_f.longLiteral(t.image);
      break;
    case VAR:
      t = jj_consume_token(VAR);
      expr=_f.var(t.image);
      break;
    case MODULE:
    case TYPE:
    case PART:
    case SINGLETON:
      expr = modelLiteral();
      break;
    case TUPLE:
      t = jj_consume_token(TUPLE);
                  coords=_f.coords();
      jj_consume_token(78);
      coord = coord();
                            coords.add(coord);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 80:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        jj_consume_token(80);
        coord = coord();
                          coords.add(coord);
      }
      jj_consume_token(79);
          expr=_f.tuple(coords);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      jj_consume_token(78);
      a = args();
      jj_consume_token(79);
      expr=_f.staticMethod(t.image, a);
      break;
    case 85:
      expr = i18n();
      break;
    case 78:
      jj_consume_token(78);
      expr = expr();
      jj_consume_token(79);
      break;
    case SWITCH:
      jj_consume_token(SWITCH);
          sw = _f.switchBlock();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
        jj_consume_token(78);
        value = defineExpr();
        jj_consume_token(79);
        sw.setValue(value);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(BLOCK_START);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NULL:
        case TUPLE:
        case SWITCH:
        case NAME:
        case VAR:
        case STRING:
        case RESKEY:
        case INT:
        case FLOAT:
        case MODULE:
        case TYPE:
        case PART:
        case SINGLETON:
        case BLOCK_START:
        case HTML_START:
        case 73:
        case 77:
        case 78:
        case 81:
        case 85:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
        test = defineExpr();
        jj_consume_token(65);
        expr = expr();
        jj_consume_token(83);
            sw.addCase(test, expr);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULT_KEYWORRD:
        jj_consume_token(DEFAULT_KEYWORRD);
        jj_consume_token(65);
        expr = expr();
        jj_consume_token(83);
            sw.setDefault(expr);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(BLOCK_END);
      expr = sw.toExpr();
      break;
    case 81:
      jj_consume_token(81);
      exprs=_f.list();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case TUPLE:
      case SWITCH:
      case NAME:
      case VAR:
      case STRING:
      case RESKEY:
      case INT:
      case FLOAT:
      case MODULE:
      case TYPE:
      case PART:
      case SINGLETON:
      case BLOCK_START:
      case HTML_START:
      case 73:
      case 77:
      case 78:
      case 81:
      case 85:
        expr = expr();
        exprs.add(expr);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 80:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_9;
          }
          jj_consume_token(80);
          expr = expr();
          exprs.add(expr);
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(82);
      expr = _f.listConstructor(exprs);
      break;
    default:
      jj_la1[22] = jj_gen;
      if (jj_2_2(2147483647)) {
        jj_consume_token(BLOCK_START);
      dict = _f.dictBuilder();
        key = defineExpr();
        jj_consume_token(65);
        value = expr();
      dict.put(key, value);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 80:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_10;
          }
          jj_consume_token(80);
          key = defineExpr();
          jj_consume_token(65);
          value = expr();
        dict.put(key, value);
        }
        jj_consume_token(BLOCK_END);
      expr = dict.toExpr();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BLOCK_START:
          jj_consume_token(BLOCK_START);
          expr = blockContent();
          jj_consume_token(BLOCK_END);
          break;
        case HTML_START:
          jj_consume_token(HTML_START);
          expr = html();
          jj_consume_token(HTML_STOP);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expr statement() throws ParseException {
  Expr expr;
  Token t;
    if (jj_2_3(2147483647)) {
      t = jj_consume_token(NAME);
      jj_consume_token(84);
      expr = expr();
      {if (true) return _f.assign(t.image, expr);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case TUPLE:
      case SWITCH:
      case NAME:
      case VAR:
      case STRING:
      case RESKEY:
      case INT:
      case FLOAT:
      case MODULE:
      case TYPE:
      case PART:
      case SINGLETON:
      case BLOCK_START:
      case HTML_START:
      case 73:
      case 77:
      case 78:
      case 81:
      case 85:
        expr = expr();
          {if (true) return expr;}
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Html html() throws ParseException {
  Html result = _f.html();
  HtmlContent content;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EMBEDD:
      case SCRIPT:
      case TAG_START:
      case END_TAG:
      case TEXT_CONTENT:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      content = htmlContent();
      result.getContents().add(content);
    }
    {if (true) return _checkHtml == true ? _f.checkHtml(result) : result;}
    throw new Error("Missing return statement in function");
  }

  final public HtmlContent htmlContent() throws ParseException {
  Token t;
  Expr expr;
  HtmlContent result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TAG_START:
      result = startTag();
      break;
    case TEXT_CONTENT:
      t = jj_consume_token(TEXT_CONTENT);
                         result = _f.textContent(t.image);
      break;
    case EMBEDD:
      jj_consume_token(EMBEDD);
      expr = blockContent();
                                     result=_f.embeddedExpr(expr); token_source.SwitchTo(HTML);
      jj_consume_token(BLOCK_END);
      break;
    case SCRIPT:
      jj_consume_token(SCRIPT);
      expr = blockContent();
                                     result=_f.embeddedExpr(expr); token_source.SwitchTo(HTML);
      jj_consume_token(SCRIPT_END);
      break;
    case END_TAG:
      t = jj_consume_token(END_TAG);
                    result = _f.endTag(t.image);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * Alternative parser entry point for parsing plain text with embedded expressions.
 *
 * <p>
 * The scanner must be switched to TEXT mode before calling this entry point.
 * </p>
 */
  final public Expr textWithEmbeddedExpressions() throws ParseException {
  Token t;
  Expr expr;
  List<Expr> parts = new ArrayList<>();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT_EMBEDD:
      case PLAIN_TEXT:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLAIN_TEXT:
        t = jj_consume_token(PLAIN_TEXT);
                       parts.add(_f.plainText(t.image));
        break;
      case TEXT_EMBEDD:
        jj_consume_token(TEXT_EMBEDD);
        expr = blockContent();
                                          parts.add(expr); token_source.SwitchTo(TEXT);
        jj_consume_token(BLOCK_END);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return _f.textContent(parts);}
    throw new Error("Missing return statement in function");
  }

  final public HtmlContent startTag() throws ParseException {
  Attribute attribute;
  List<Attribute> attributes = null;
  Token t;
  StartTag result;
    t = jj_consume_token(TAG_START);
    result = _f.startTag(t.image);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTRIBUTE_NAME:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_13;
      }
      attribute = attribute();
      result.getAttributes().add(attribute);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END_EMPTY_TAG:
      jj_consume_token(END_EMPTY_TAG);
      result.setEmpty(true);
      break;
    case TAG_END:
      jj_consume_token(TAG_END);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Attribute attribute() throws ParseException {
  Token t;
  AttributeContent content;
    t = jj_consume_token(ATTRIBUTE_NAME);
    jj_consume_token(EQ);
    jj_consume_token(QUOT_START);
          content=attributeContents();
    jj_consume_token(QUOT_END);
    {if (true) return _f.attribute(t.image, content);}
    throw new Error("Missing return statement in function");
  }

  final public AttributeContent attributeContents() throws ParseException {
  AttributeContent content;
  AttributeContents concat;
  AttributeContent result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMBEDD_ATTR:
    case ATTRIBUTE_TEXT:
      result = attributeContent();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EMBEDD_ATTR:
      case ATTRIBUTE_TEXT:
        content = attributeContent();
        concat = _f.concat();
        concat.getValues().add(result);
        concat.getValues().add(content);
        result = concat;
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EMBEDD_ATTR:
          case ATTRIBUTE_TEXT:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_14;
          }
          content = attributeContent();
          concat.getValues().add(content);
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    {if (true) return result==null ? _f.textContent("") : result;}
    throw new Error("Missing return statement in function");
  }

  final public AttributeContent attributeContent() throws ParseException {
  Token t;
  Expr expr;
  AttributeContent result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTRIBUTE_TEXT:
      t = jj_consume_token(ATTRIBUTE_TEXT);
                           result = _f.textContent(t.image);
      break;
    case EMBEDD_ATTR:
      jj_consume_token(EMBEDD_ATTR);
      expr = blockContent();
                                          result = _f.embeddedExpr(expr); token_source.SwitchTo(ATTR_CONTENT);
      jj_consume_token(BLOCK_END);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expr blockContent() throws ParseException {
  List<Expr> exprs;
  Expr expr;
    exprs=_f.list();
    expr = statement();
    exprs.add(expr);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_15;
      }
      jj_consume_token(83);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case TUPLE:
      case SWITCH:
      case NAME:
      case VAR:
      case STRING:
      case RESKEY:
      case INT:
      case FLOAT:
      case MODULE:
      case TYPE:
      case PART:
      case SINGLETON:
      case BLOCK_START:
      case HTML_START:
      case 73:
      case 77:
      case 78:
      case 81:
      case 85:
        expr = statement();
        exprs.add(expr);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    }
    expr = _f.block(exprs);
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expr.Tuple.Coord coord() throws ParseException {
  Token t;
  boolean optional = false;
  Expr expr;
    t = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
      jj_consume_token(64);
                          optional = true;
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    jj_consume_token(63);
    expr = expr();
          {if (true) return _f.coord(t.image, optional, expr);}
    throw new Error("Missing return statement in function");
  }

  final public Expr i18n() throws ParseException {
  I18NBuilder result = _f.i18nBuilder();
    jj_consume_token(85);
    i18nContents(result);
    jj_consume_token(79);
    {if (true) return result.build();}
    throw new Error("Missing return statement in function");
  }

  final public void i18nContents(I18NBuilder result) throws ParseException {
  Token s, l;
    i18nEntry(result);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 80:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_16;
      }
      jj_consume_token(80);
      i18nEntry(result);
    }
  }

  final public void i18nEntry(I18NBuilder result) throws ParseException {
  Token s, l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      s = jj_consume_token(STRING);
      l = jj_consume_token(LANGTAG);
          result.add(s.image, l.image);
      break;
    case NAME:
      s = jj_consume_token(NAME);
      jj_consume_token(65);
      jj_consume_token(BLOCK_START);
      i18nContents(result.suffix(s.image));
      jj_consume_token(BLOCK_END);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Args args() throws ParseException {
  Args result = _f.args();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case TUPLE:
    case SWITCH:
    case NAME:
    case VAR:
    case STRING:
    case RESKEY:
    case INT:
    case FLOAT:
    case MODULE:
    case TYPE:
    case PART:
    case SINGLETON:
    case BLOCK_START:
    case HTML_START:
    case 73:
    case 77:
    case 78:
    case 81:
    case 85:
      arg(result);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 80:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_17;
        }
        jj_consume_token(80);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NULL:
        case TUPLE:
        case SWITCH:
        case NAME:
        case VAR:
        case STRING:
        case RESKEY:
        case INT:
        case FLOAT:
        case MODULE:
        case TYPE:
        case PART:
        case SINGLETON:
        case BLOCK_START:
        case HTML_START:
        case 73:
        case 77:
        case 78:
        case 81:
        case 85:
          arg(result);
          break;
        default:
          jj_la1[41] = jj_gen;
          {if (true) return result;}
        }
      }
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void arg(Args args) throws ParseException {
  Expr e;
  Token t;
  String name = null;
    if (jj_2_4(2147483647)) {
      t = jj_consume_token(NAME);
      jj_consume_token(65);
      name = t.image;
    } else {
      ;
    }
    e = expr();
    _f.addArg(args, name, e);
  }

  final public Expr modelLiteral() throws ParseException {
  Expr result;
  Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
      n = jj_consume_token(MODULE);
      result=_f.moduleLiteral(n.image);
      break;
    case TYPE:
      n = jj_consume_token(TYPE);
      result=_f.typeLiteral(n.image);
      break;
    case PART:
      n = jj_consume_token(PART);
      result=_f.partLiteral(n.image);
      break;
    case SINGLETON:
      n = jj_consume_token(SINGLETON);
      result=_f.singletonLiteral(n.image);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(78)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(83)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(SWITCH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    if (jj_scan_token(BLOCK_START)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_scan_token(BLOCK_END)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(78)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(80)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(78)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(TUPLE)) return true;
    if (jj_scan_token(78)) return true;
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(RESKEY)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(81)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(80)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(ATTRIBUTE_NAME)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QUOT_START)) return true;
    if (jj_scan_token(QUOT_END)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(78)) return true;
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(CHAIN)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(78)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(END_EMPTY_TAG)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(ACCESS)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(78)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(TAG_START)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(SINGLETON)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(PART)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(MODULE)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(65)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(76)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(75)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(65)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(END_TAG)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(SCRIPT)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(SCRIPT_END)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(EMBEDD)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(BLOCK_END)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(TEXT_CONTENT)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(80)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(84)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_scan_token(BLOCK_START)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(BLOCK_END)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(84)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(STRING)) return true;
    if (jj_scan_token(LANGTAG)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(80)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(HTML_START)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(HTML_STOP)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(BLOCK_START)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(65)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(BLOCK_START)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(BLOCK_END)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(80)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(BLOCK_START)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BLOCK_END)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(80)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(85)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(DEFAULT_KEYWORRD)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(81)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(63)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SearchExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf5396380,0x0,0x800,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0xf5396380,0x60000,0x0,0x60000,0x400000,0x0,0x0,0xf5396380,0x8000,0x0,0xf5396380,0x0,0xf5396380,0x0,0xf5396380,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf5396380,0x0,0x0,0x110000,0x0,0xf5396380,0xf5396380,0xf0000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x0,0x0,0x9,0x0,0x0,0x9,0x9,0x4f00,0x4f00,0x60000,0x60000,0x800000,0xc000000,0x50000000,0x50000000,0x50000000,0x50000000,0x0,0x9,0x0,0x0,0x0,0x0,0x9,0x9,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x226200,0x1,0x0,0x0,0xfc,0xfc,0x300,0x300,0x1c00,0x1c00,0x226200,0x24000,0x10000,0x24000,0x0,0x10000,0x4000,0x226200,0x0,0x10000,0x226200,0x10000,0x224000,0x0,0x226200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x226200,0x1,0x10000,0x0,0x10000,0x226200,0x226200,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SearchExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SearchExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SearchExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SearchExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SearchExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SearchExpressionParser(SearchExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SearchExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[86];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 86; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
