SearchExpressionImpl = Search Expression
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.genericCreateDialog.template.label = Object creation
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.genericCreateDialog.template.label.tooltip = Create dialog for a new object.\ 
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.genericCreateDialog.template.properties.create-handler = Create button
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.genericCreateDialog.template.properties.helpID = Enable help
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.genericCreateDialog.template.properties.helpID.tooltip = When this property is set, a help page can be created for this view.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.genericCreateDialog.template.properties.linkOperation = Link operation
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.genericCreateDialog.template.properties.securityProviderClass = Access control
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.genericCreateDialog.template.properties.securityProviderClass.tooltip = Object on which the security is checked
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.genericCreateDialog.template.properties.typeOptions = Type options
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.simpleCreateDialog.template.label = Object creation
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.simpleCreateDialog.template.label.tooltip = Creation dialog for a new object. In the detail configuration of the dialog you can determine how to proceed with the created object.\ \ \ 
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.simpleCreateDialog.template.properties.model = Model
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.simpleCreateDialog.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.simpleCreateDialog.template.properties.openerIcon = Icon
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.create.simpleCreateDialog.template.properties.typeOptions = Type options
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.genericForm.template.label = Form (generic)
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.genericForm.template.label.tooltip = A generally configurable form via TL-Script that can be used both for editing and specifically for creating new objects. This template should only be used for special cases that cannot be handled using the simple editing form.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.genericForm.template.properties.modelBuilder = Form generation
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.gridByType.template.label = Grid
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.gridByType.template.label.tooltip = Row-editable table that displays a list of objects. The columns of the table are derived from the properties of the displayed type.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.gridByType.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.gridByType.template.properties.type = Type
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.settingsAssistent.template.label = Setting component
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.settingsAssistent.template.label.tooltip = View to edit session-local settings that can serve as parameters for other components. The settings component has an output channel through which it can pass the edited transient object to other components.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableByType.template.label = Table
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableByType.template.label.tooltip = A table that displays a set of objects. The columns of the table are determined by the properties of the model type to be displayed. The set of objects to be displayed can be freely determined by a search expression.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableByType.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithDialogs.template.defaults.buttonColumn = Commands
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithDialogs.template.defaults.edit = Edit
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithDialogs.template.defaults.editButton = Edit
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithDialogs.template.defaults.editDialogTitle = Properties
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithDialogs.template.defaults.editFormTitle = Properties (Form)
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithDialogs.template.defaults.firstRow = At the beginning.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithDialogs.template.defaults.lastRow = At the end.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithDialogs.template.defaults.nextObject = Next
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithDialogs.template.defaults.previousObject = Previous
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithDialogs.template.label = Table (with edit dialog)
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithDialogs.template.label.tooltip = A preconfigured view for the tabular management of objects of a type to be specified. In the view, objects can be listed, created and deleted in tabular form. The individual parts of the view can then be further customized.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithForm.template.i18n.detail = Details
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithForm.template.label = Table (with form)
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithForm.template.label.tooltip = A preconfigured view for the tabular management of objects of a type to be specified with a detail view. In the view, objects can be listed, created and deleted in tabular form. The individual parts of the view can then be further customized.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tableWithForm.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileListByType.template.label = Tile context list
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileListByType.template.label.tooltip = A list of tiles, each of which represents an object from a set of objects. <p>The appearance of a tile is calculated from the properties of the object represented by the tile. The set of objects represented as tiles can be freely defined using a search expression.</p>\ 
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileListByType.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTableByType.template.label = Tile context table
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTableByType.template.label.tooltip = A selection table that defines a context for a downstream view. <p>When an object is selected in the selection table, the subsequent view is displayed in the context of the selected object and can refer to this object via a model channel.</p>
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTableByType.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeByType.template.label = Tile context tree
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeByType.template.label.tooltip = A tree that represents a context selection for further tiles. Clicking on a tree node again opens a tile view whose individual tiles can access the object selected in the tree.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeByType.template.properties.model = Component model
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeByType.template.properties.model.tooltip = The component model is available to the function that calculates the root node. This makes it possible to create a dependent view that displays information depending on the selection in another view, for example.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeByType.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeByType.template.properties.reference.tooltip = The reference, which is displayed as a tree. For an object, the objects stored in this reference are displayed as sub-elements.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeByType.template.properties.rootNode = Root node
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeByType.template.properties.rootNode.tooltip = Mapping function that receives the component model returns the root node of this tree. <p> The input component model was accepted by <i>Model predicate</i> before. </p>
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeByType.template.properties.type.tooltip = Common type of all elements of the tree to be displayed.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeTableByType.template.label = Tile context tree table
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeTableByType.template.label.tooltip = A table with expandable accounts that represents a context selection for further tiles. Clicking on a table row again opens a tile view whose individual tiles can access the object selected in the table.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeTableByType.template.properties.model = Component model
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeTableByType.template.properties.model.tooltip = The component model is available to the function that calculates the root node. This makes it possible to create a dependent view that displays information depending on the selection in another view, for example.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeTableByType.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeTableByType.template.properties.reference.tooltip = The reference, which is displayed as a tree. For an object, the objects stored in this reference are displayed as sub-elements.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeTableByType.template.properties.rootNode = Root node
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeTableByType.template.properties.rootNode.tooltip = Mapping function that receives the component model returns the root node of this tree. <p> The input component model was accepted by <i>Model predicate</i> before. </p>
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tileTreeTableByType.template.properties.type.tooltip = Common type of all elements of the tree to be displayed.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.label = Document tile
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.label.tooltip = Tile that displays a PDF document. Optionally, the tile can also display a document preview of the document in its preview.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.document = Document function
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.document.tooltip = Function that calculates the document to be displayed. The function gets the configured model as input and calculates the document to be displayed.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.documentDescription = Document description
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.documentDescription.tooltip = Description of the displayed document.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.helpID = Enable help
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.helpID.tooltip = When this property is set, a help page can be created for this view.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.model = Model
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.model.tooltip = The document to be displayed is calculated from this model.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.previewIcon = Preview image
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.previewIcon.tooltip = If a preview image is specified, no preview of the document but the image is displayed,
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.securityDomain = Security domain
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.securityProviderClass = Access control
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.tiles.documentTile.template.properties.securityProviderClass.tooltip = Object on which the security is checked
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.transaction.template.properties.securityProviderClass = Access control
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.transaction.template.properties.securityProviderClass.tooltip = Object on which the security is checked
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.transaction.template.properties.transactionHandler = Transaction
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.transactionAssistent.template.label = Transaction with input
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.transactionAssistent.template.properties.label = Label
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeByType.template.label = Tree
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeByType.template.label.tooltip = A selection component with expandable nodes. A tree represents a structure of objects. An object can have sub-objects that only become visible when the parent object is expanded. Usually, a tree serves as a selection component that delivers the selected object to another component for further processing.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeByType.template.properties.model = Component model
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeByType.template.properties.model.tooltip = The component model is available to the function that calculates the root node. This makes it possible to create a dependent view that displays information depending on the selection in another view, for example.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeByType.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeByType.template.properties.reference.tooltip = The reference, which is displayed as a tree. For an object, the objects stored in this reference are displayed as sub-elements.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeByType.template.properties.rootNode = Root node
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeByType.template.properties.rootNode.tooltip = Mapping function that receives the component model returns the root node of this tree. <p> The input component model was accepted by <i>Model predicate</i> before. </p>
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeByType.template.properties.type.tooltip = Common type of all elements of the tree to be displayed.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeGridByType.template.label = Tree grid
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeGridByType.template.label.tooltip = Row editable table representing a structure with expandable nodes. The columns of the table are derived from the properties of the represented type.\ 
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeGridByType.template.properties.model = Component model
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeGridByType.template.properties.model.tooltip = The component model is available to the function that calculates the root node. This makes it possible to create a dependent view that displays information depending on the selection in another view, for example.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeGridByType.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeGridByType.template.properties.reference.tooltip = The reference, which is displayed as a tree. For an object, the objects stored in this reference are displayed as sub-elements.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeGridByType.template.properties.rootNode = Root node
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeGridByType.template.properties.rootNode.tooltip = Mapping function that receives the component model returns the root node of this tree. <p> The input component model was accepted by <i>Model predicate</i> before. </p>
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeGridByType.template.properties.type.tooltip = Common type of all elements of the tree to be displayed.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeTableByType.template.label = Tree table
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeTableByType.template.label.tooltip = A table with expandable rows. Such a table can be used either directly for visualization of information or as a context selection for another component.\ 
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeTableByType.template.properties.model = Component model
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeTableByType.template.properties.model.tooltip = The component model is available to the function that calculates the root node. This makes it possible to create a dependent view that displays information depending on the selection in another view, for example.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeTableByType.template.properties.name = Name
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeTableByType.template.properties.reference.tooltip = The reference, which is displayed as a tree. For an object, the objects stored in this reference are displayed as sub-elements.
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeTableByType.template.properties.rootNode = Root node
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeTableByType.template.properties.rootNode.tooltip = Mapping function that receives the component model returns the root node of this tree. <p> The input component model was accepted by <i>Model predicate</i> before. </p>
class.com.top_logic.layout.editor.I18NConstants.DYNAMIC_COMPONENT.com.top_logic.model.search.treeTableByType.template.properties.type.tooltip = Common type of all elements of the tree to be displayed.
class.com.top_logic.model.search.constraint.I18NConstants.NO_DELETION_POSSIBLE__OBJECT = The object "{0}" can not be deleted.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_ACCES_TO_UNDEFINED_VARIABLE__NAME = Access to undefined variable "{0}".
class.com.top_logic.model.search.expr.I18NConstants.ERROR_EVALUATION_FAILED__EXPR_ARGS_DEFS = Evaluation of ''{0}'' failed, arguments: {1}, variables: {2}
class.com.top_logic.model.search.expr.I18NConstants.ERROR_INVALID_DATE_FORMAT__VAL_EXPR_MSG = Invalid date format ''{0}'' in {1} ({2}).
class.com.top_logic.model.search.expr.I18NConstants.ERROR_INVALID_FORMAT__STR_EXPR_MSG = Invalid format ''{0}'' in {1} ({2}).
class.com.top_logic.model.search.expr.I18NConstants.ERROR_INVALID_LIST_INDEX__LIST_INDEX_EXPR = Invalid list index {1} for list {0} used in {2}.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_LIST_MAP_OR_OBJECT_REQUIRED__VALUE_EXPR = A list, map, or business object is expected, not "{0}" in {1}.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_MORE_THAN_A_SINGLE_ELEMENT__VAL_EXPR = At most one element expected as a result of ''{1}'', the actual value is: {0}
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NEITHER_CLASS_NOR_ENUM__TYPE_EXPR = The type ''{0}'' is neither a class nor an enumeration in: {1}
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NOT_A_CALENDAR__VAL_EXPR = The value ''{0}'' is not a calendar, use ''toUserCalendar()'' or ''toSystemCalendar()'' to convert the expression {1}.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NOT_A_DATE__VAL_EXPR = The value ''{0}'' is not a date in {1}.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NOT_A_FUNCTION__VAL_EXPR = A function is expected, but "{0}" was passed in {1}.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NOT_A_REFERENCE__EXPR_VALUE = Evaluation ''{1}'' of ''{0}'' does not result in a reference.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NOT_A_RES_KEY__VALUE__EXPR = The value ''{0}'' in ''{1}'' is not an internationalisable value.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NOT_A_STRUCT_ENTRY__VAL_EXPR = The value ''{0}'' is not a structure entry in {1}.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NOT_A_STRUCT__VAL_EXPR = The value ''{0}'' is not a structure in {1}.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NOT_A_TL_OBJECT__VAL_EXPR = The value ''{0}'' is not a business object in {1}.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NOT_A_TYPE_PART__EXPR_VALUE = Evaluation ''{1}'' of ''{0}'' does not result in a model attribute.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NO_SUCH_PROPERTY__OBJ_NAME_EXPR = The object "{0}" has no property "{1}" in {2}.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_NUMBER_REQUIRED__VALUE_EXPR = A number is expected, but "{0}" was given in {1}.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_UNEXPECTED_NULL_VALUE__EXPR = The value must not be "null" in {0}.
class.com.top_logic.model.search.expr.I18NConstants.ERROR_UNEXPECTED_TYPE__EXPECTED_VAL_EXPR = The value "{1}" is not of the expected type "{0}" in {2}.
class.com.top_logic.model.search.expr.config.I18NConstants.ERROR_EXPRESSION_SYNTAX__DETAILS = Syntax error: {0}
class.com.top_logic.model.search.expr.config.I18NConstants.ERROR_TAILING_GARBAGE = Trailing garbage.
class.com.top_logic.model.search.expr.config.dom.I18NConstants.ERROR_NO_MATCHING_START_TAG__NAME = No matching start tag for end tag ''{0}''.
class.com.top_logic.model.search.expr.config.operations.I18NConstants.ERROR_AT_LEAST_ARGUMENTS_EXPECTED__CNT_EXPR = At least {0} argument(s) expected in: {1}
class.com.top_logic.model.search.expr.config.operations.I18NConstants.ERROR_AT_LEAST_ONE_ARGUMENT_EXPECTED__EXPR = At least one argument expected in: {0}
class.com.top_logic.model.search.expr.config.operations.I18NConstants.ERROR_AT_MOST_ARGUMENTS_EXPECTED__CNT_EXPR = At most {0} argument(s) expected in: {1}
class.com.top_logic.model.search.expr.config.operations.I18NConstants.ERROR_EXPECTED_ASSOCIATION_END_LITERAL__EXPR = An association end literal is expected in: {0}
class.com.top_logic.model.search.expr.config.operations.I18NConstants.ERROR_EXPECTED_REFERENCE_LITERAL__EXPR = A reference literal is expected in: {0}
class.com.top_logic.model.search.expr.config.operations.I18NConstants.ERROR_EXPECTED_STRUCTURED_TYPE_LITERAL__EXPR = A class or enum literal is expected in: {0}
class.com.top_logic.model.search.expr.config.operations.I18NConstants.ERROR_EXPECTED_TYPE_PART_LITERAL__EXPR = A attribute literal is expected in: {0}
class.com.top_logic.model.search.expr.config.operations.I18NConstants.ERROR_EXPECTING_A_TARGET__EXPR = The expression expects a target: {0}
class.com.top_logic.model.search.expr.config.operations.I18NConstants.ERROR_LITERAL_ARGUMENT__EXPR = A literal is expected in: {0}
class.com.top_logic.model.search.expr.config.operations.I18NConstants.ERROR_MUST_BE_INVOKED_WITHOUT_TARGET__EXPR = The expression must only have arguments, no target: {0}
class.com.top_logic.model.search.expr.config.operations.I18NConstants.ERROR_NO_ARGUMENTS_EXPECTED__EXPR = No arguments expected in: {0}
class.com.top_logic.model.search.expr.config.operations.arithmetic.I18NConstants.ERROR_FAILED_TO_GENERATE_ID__EXPR_MSG = An error occurred during ID generation ({0}): {1}
class.com.top_logic.model.search.expr.config.operations.arithmetic.I18NConstants.ERROR_NO_TRANSACTION__EXPR = An ID can only be generated within a transaction ({0}).
class.com.top_logic.model.search.expr.config.operations.cache.I18NConstants.ERROR_MULTIPLE_VALUES_WITH_SAME_KEY__KEY_V1_V2_EXPR = There are several values with the same key "{0}" (e.g. {1} and {2}) in {3}.
class.com.top_logic.model.search.expr.config.operations.regex.I18NConstants.ERROR_NO_SUCH_GROUP__ID_CNT = Group {0} does not exist in the regular expression. There is only {1} group(s).
class.com.top_logic.model.search.expr.config.operations.string.I18NConstants.ERROR_INVALID_STRING_INDEX__STR_START_STOP_EXPR = Invalid range from {1} to {2} in string "{0}" in {3}.
class.com.top_logic.model.search.expr.config.operations.struct.I18NConstants.ERROR_ARGUMENT_COUNT_MISMATCH__EXPECTED_ACTUAL_EXPR = A value must be specified for each property of the structure type ({0}). Only {1} values specified in {2}.
class.com.top_logic.model.search.expr.config.operations.struct.I18NConstants.ERROR_DUPLICATE_KEYS__KEY_IDX1_IDX2_EXPR = The key value "{0}" is duplicated. It occurs in position {1} and {2}: {3}
class.com.top_logic.model.search.expr.config.operations.struct.I18NConstants.ERROR_STRUCT_TYPE_EXPECTED__VALUE_EXPR = A struct type is expected but "{0}" was found in {1}.
class.com.top_logic.model.search.expr.html.I18NConstants.ERROR_UNSAFE_HTML__ATTRIBUTE__VALUE = Unsafe HTML as value for attribute {0}.
class.com.top_logic.model.search.expr.interpreter.I18NConstants.ERROR_UNRESOLVED_VARIABLE__NAME = Undefined variable ''{0}''.
class.com.top_logic.model.search.form.I18NConstants.ERROR_INVALID_IMAGE_DEFINITION__SOURCE__POSITION = Invalid preview image at position {1}: {0}
class.com.top_logic.model.search.form.I18NConstants.ERROR_NO_IMAGE__OBJ = {0} is no preview image.
class.com.top_logic.model.search.providers.I18NConstants.AMBIGUOUS_RESULT_FROM_RESOLVER__KEY_RESULT_ATTR = Resolver function returned ambiguous result for key values ''{0}'' for attribute ''{2}'': {1}
class.com.top_logic.model.search.providers.I18NConstants.CANNOT_RESOLVE_OBJECT__KEY__ATTR = Cannot resolve object with key ''{0}'' for attribute ''{1}''.
class.com.top_logic.model.search.providers.I18NConstants.ERROR_INVALID_VALUE = The input is not valid.
class.com.top_logic.model.search.providers.I18NConstants.ERROR_NO_BOUND_OBJECT_RESULT__EXPR__SRC__VALUE = Evaluation of ''{0}'' for model ''{1}'' does not result in a valid security object: ''{2}.''
class.com.top_logic.model.search.providers.I18NConstants.ERROR_SCRIPT_RESULT_IS_COLLECTION__ATTR_VALUE = The calculation result of attribute "{0}" is the set {1}, but a single value is expected.
class.com.top_logic.model.search.providers.I18NConstants.ERROR_SCRIPT_RESULT_OF_INCOMPATIBLE_TYPE__ATTR_EXPECTED_ACTUAL = The calculation result of attribute "{0}" must be of type "{1}", but "{2}" is delivered.
class.com.top_logic.model.search.providers.I18NConstants.INVALID_REFERENCE_ELEMET__EXPECTED_FOUND_ATTR = Expected reference element ''{0}'' for attribute ''{2}'' but found ''{1}''.
class.com.top_logic.model.search.providers.I18NConstants.TASK_MESSAGE__VALUE = {0}
class.com.top_logic.model.search.providers.I18NConstants.UNEXPECTED_TEXT_CONTENT__TEXT__ATTR = Unexpected text content ''{0}'' in reference value for attribute ''{1}''.
com.top_logic.model.search.annotate.TLNumberOfEditorRows = Editor rows
com.top_logic.model.search.annotate.TLNumberOfEditorRows.max = Maximum
com.top_logic.model.search.annotate.TLNumberOfEditorRows.min = Minimum
com.top_logic.model.search.expr.config.dom.Expr$Wrapped = {src}
com.top_logic.model.search.expr.supplier.SearchExpressionCurrentPerson = currentPerson
com.top_logic.model.search.expr.supplier.SearchExpressionNow = now
com.top_logic.model.search.expr.supplier.SearchExpressionToday = today
com.top_logic.model.search.form.GalleryPreview.Config.icon = Replacement symbol
com.top_logic.model.search.form.GalleryPreview.Config.icon.tooltip = Icon that is displayed when no image can be determined from the model. <p>That may happen when <i>model</i> is not of the correct <i>type</i>, or the gallery attribute is currently not filled. </p>
com.top_logic.model.search.persistency.attribute.macro.MacroAttribute = HTML macro
com.top_logic.model.search.persistency.attribute.macro.MacroAttribute.Config.expr = Macro expression
com.top_logic.model.search.persistency.attribute.macro.MacroAttribute.Config.expr.tooltip = Function taking the current object as argument and returning a HTML rendering expression. <p>A typical usage would be <code>model -> {{{Some &lt;b>bold&lt;/b> text containing dynamic value {$model.get(`my.module:MyType#myProp`}!}}}</code>.</p>
com.top_logic.model.search.providers.AttributeByExpression = Search
com.top_logic.model.search.providers.AttributeByExpression.Config.expr = Function
com.top_logic.model.search.providers.AttributeByExpression.Config.expr.tooltip = Function computing the attribute value. The function is expected to take the current model as single argument.
com.top_logic.model.search.providers.AttributeValueBindingByExpression = Reference by stable key
com.top_logic.model.search.providers.AttributeValueBindingByExpression.Config.key-attributes = Key attributes
com.top_logic.model.search.providers.AttributeValueBindingByExpression.Config.key-attributes.tooltip = Comma-separated list of attribute names for storing the values computed by the key function.
com.top_logic.model.search.providers.AttributeValueBindingByExpression.Config.key-fun = Key function
com.top_logic.model.search.providers.AttributeValueBindingByExpression.Config.key-fun.tooltip = Function computing for a given object a stable key for resolving back the same object during import. The function must return the same number of values as key attributes are given. Multiple values must be wrapped in a list.
com.top_logic.model.search.providers.AttributeValueBindingByExpression.Config.reference-tag = Reference tag
com.top_logic.model.search.providers.AttributeValueBindingByExpression.Config.reference-tag.tooltip = XML tag name used for encoding a single reference if the exported attribute may contain multiple values.
com.top_logic.model.search.providers.AttributeValueBindingByExpression.Config.resolver-fun = Resolver function
com.top_logic.model.search.providers.AttributeValueBindingByExpression.Config.resolver-fun.tooltip = Function resolving an object by its stable key. The function must take as many arguments as key attributes are given.
com.top_logic.model.search.providers.ComputedColumnProviderByExpression = Computed column
com.top_logic.model.search.providers.DropTargetByExpressionConfig.postCreateActions = Post drop actions
com.top_logic.model.search.providers.DropTargetByExpressionConfig.postCreateActions.tooltip = Actions to be executed after a new object has been successfully dropped.
com.top_logic.model.search.providers.DynamicColumnProviderByExpression = Dynamic set of columns
com.top_logic.model.search.providers.FilterByExpression = Filter by expression
com.top_logic.model.search.providers.FilterByExpression.Config.predicate = Predicate
com.top_logic.model.search.providers.FilterByExpression.Config.predicate.tooltip = Boolean function with two arguments (current model and potential option).
com.top_logic.model.search.providers.GridApplyHandlerByExpression.Config.can-edit = Editing tester
com.top_logic.model.search.providers.GridCreateHandlerByExpression.Config.typeChooser = Display type selection
com.top_logic.model.search.providers.GridDropTargetByExpression = Grid target by expression
com.top_logic.model.search.providers.GridDropTargetByExpression.tooltip = <i>Table drop </i> for grids that can be completely configured using model queries.
com.top_logic.model.search.providers.LabelByExpression = Label using expression
com.top_logic.model.search.providers.LabelByExpression.Config.css-class = CSS class
com.top_logic.model.search.providers.LabelByExpression.Config.image = Image
com.top_logic.model.search.providers.LabelByExpression.Config.label = Label expression
com.top_logic.model.search.providers.LabelByExpression.Config.tooltip = Tooltip expression
com.top_logic.model.search.providers.ListModelByExpression = By search expression
com.top_logic.model.search.providers.ListModelByExpression.Config.elements = List elements
com.top_logic.model.search.providers.ListModelByExpression.Config.modelForElement = Component model for a list element
com.top_logic.model.search.providers.ListModelByExpression.Config.supportsElement = Checker for support of a list element
com.top_logic.model.search.providers.ListModelByExpression.Config.supportsModel = Checker for support of a component model
com.top_logic.model.search.providers.OptionsByExpression = Options by expression
com.top_logic.model.search.providers.OptionsByExpression.Config.function = Function
com.top_logic.model.search.providers.OptionsByExpression.Config.function.tooltip = Set-valued function with one argument (current model).
com.top_logic.model.search.providers.OrderedTreeDropActionOp = Dragging {dropped-object} to {drop-position-parent}.
com.top_logic.model.search.providers.ScriptValueNaming$Name = Result of {expr}
com.top_logic.model.search.providers.SecurityObjectByExpression = Security object using expression
com.top_logic.model.search.providers.SecurityObjectByExpression.Config.function = Function
com.top_logic.model.search.providers.SecurityObjectByExpression.Config.function.tooltip = Function that determines the security object. <p>The model for which a security object is required is passed to the function as a parameter.</p>
com.top_logic.model.search.providers.TableDragSourceByExpression = Custom table drag
com.top_logic.model.search.providers.TableDragSourceByExpression.tooltip = <i>Table drag</i> that can be completely configured using model queries.
com.top_logic.model.search.providers.TableDropTargetByExpression = Custom table row drop
com.top_logic.model.search.providers.TableDropTargetByExpression.Config.canDrop = Can drop
com.top_logic.model.search.providers.TableDropTargetByExpression.Config.canDrop.tooltip = Function checking if a drop onto the referenced row can be performed. <p>The function receives the dragged element as first argument and the referenced row as second argument</p>
com.top_logic.model.search.providers.TableDropTargetByExpression.Config.handleDrop = Handle drop
com.top_logic.model.search.providers.TableDropTargetByExpression.Config.handleDrop.tooltip = Function executing a drop onto the referenced row. <p>The function receives the dragged element as first argument and the referenced row as second argument</p>
com.top_logic.model.search.providers.TableDropTargetByExpression.tooltip = <i>Table drop</i> that can be completely configured using model queries.
com.top_logic.model.search.providers.TableGridDragSourceByExpression = Custom table grid drag
com.top_logic.model.search.providers.TableGridDragSourceByExpression.tooltip = <i>Grid drag </i> for table grids that can be completely configured using model queries.
com.top_logic.model.search.providers.TitleByExpression = Title using expression
com.top_logic.model.search.providers.TitleByExpression.Config.expr = Expression
com.top_logic.model.search.providers.TreeDragSourceByExpression = Custom tree drag
com.top_logic.model.search.providers.TreeDragSourceByExpression.tooltip = <i>Tree drag</i> that can be completely configured using model queries.
com.top_logic.model.search.providers.TreeDropActionOp = Dragging {dropped-object} to {drop-position}.
com.top_logic.model.search.providers.TreeDropTargetByExpression = Custom tree drop
com.top_logic.model.search.providers.TreeDropTargetByExpression.Config.canDrop = Can drop
com.top_logic.model.search.providers.TreeDropTargetByExpression.Config.canDrop.tooltip = Function checking if a drop onto the referenced node can be performed. <p>The function receives the dragged element as first argument and the referenced node as second argument</p>
com.top_logic.model.search.providers.TreeDropTargetByExpression.Config.handleDrop = Handle drop
com.top_logic.model.search.providers.TreeDropTargetByExpression.Config.handleDrop.tooltip = Function executing a drop onto the referenced node. <p>The function receives the dragged element as first argument and the referenced node as second argument.</p>
com.top_logic.model.search.providers.TreeDropTargetByExpression.tooltip = <i>Tree drop</i> that can be completely configured using model queries.
com.top_logic.model.search.providers.TreeGridDragSourceByExpression = Custom tree grid drag
com.top_logic.model.search.providers.TreeGridDragSourceByExpression.tooltip = <i>Grid drag </i> for tree grids that can be completely configured using model queries.
com.top_logic.model.search.providers.TreeModelByExpression = By expression
com.top_logic.model.search.providers.TreeTableDragSourceByExpression = Custom table tree drag
com.top_logic.model.search.providers.TreeTableDragSourceByExpression.tooltip = <i>Table drag </i> for table trees that can be completely configured using model queries.
com.top_logic.model.search.providers.TreeTableDropTargetByExpression = Custom table tree drop
com.top_logic.model.search.providers.TreeTableDropTargetByExpression.tooltip = <i>Table drop </i> for table trees that can be completely configured using model queries.
com.top_logic.model.search.tiles.DynamicTilePreviewText = Expression based text
com.top_logic.model.search.tiles.FormPreviewContent = Form preview
com.top_logic.model.search.tiles.FormPreviewContent.Config.icon = Replacement symbol
com.top_logic.model.search.tiles.FormPreviewContent.Config.icon.tooltip = Icon that is displayed when the configured <i>model</i> is not of the expected <i>type</i>.
com.top_logic.model.search.tiles.ImageContentProvider = Expression based image
com.top_logic.model.search.tiles.ModelBasedTilePreview.Config.content-preview = Content area
com.top_logic.model.search.tiles.ModelBasedTilePreview.Config.label = Label
com.top_logic.model.search.tiles.SimpleStaticTilePreviewText = Static text
com.top_logic.model.search.tiles.StaticImageContentProvider = Static image
com.top_logic.model.search.tiles.TableContentProvider = Tablepreview
com.top_logic.model.search.ui.ExpertSearchExpressionEditor.SearchConfig.search-expression = Search expression
com.top_logic.model.search.ui.model.AbstractStep.next = Next step
com.top_logic.model.search.ui.model.AbstractStep.next@empty = No further step
com.top_logic.model.search.ui.model.AbstractTypeSearch.type = result type
com.top_logic.model.search.ui.model.AssociationFilter = is used in {incoming-part} and for {outgoing-part} ({value-type}): {comparisons}
com.top_logic.model.search.ui.model.AssociationFilter.incoming-part = usage
com.top_logic.model.search.ui.model.AssociationFilter.outgoing-part = associated value to compare
com.top_logic.model.search.ui.model.AssociationFilter@option = {outgoing-part | {associated value...}}
com.top_logic.model.search.ui.model.AssociationStep = \u2190 is used in {incoming-part} {outgoing-part} ({value-type}) {next}
com.top_logic.model.search.ui.model.AssociationStep.incoming-part = usage
com.top_logic.model.search.ui.model.AssociationStep.outgoing-part = associated value
com.top_logic.model.search.ui.model.AssociationStep@option = {outgoing-part | {associated value...}}
com.top_logic.model.search.ui.model.AttributeFilter = for {attribute} ({value-type}): {comparisons}
com.top_logic.model.search.ui.model.AttributeFilter.attribute = attribute to compare
com.top_logic.model.search.ui.model.AttributeFilter@option = {attribute | {other attribute...}}
com.top_logic.model.search.ui.model.AttributeStep = \u2192 {attribute} ({value-type}) {next}
com.top_logic.model.search.ui.model.AttributeStep.attribute = Attribute
com.top_logic.model.search.ui.model.AttributeStep@option = {attribute | {other attribute...}}
com.top_logic.model.search.ui.model.CombinationExpression.combinator = Combinator
com.top_logic.model.search.ui.model.CombinedFilter = {combinator}: {filters}
com.top_logic.model.search.ui.model.CombinedFilter@option = logical operation...
com.top_logic.model.search.ui.model.CombinedOperator$Impl = {combinator}: {comparisons}
com.top_logic.model.search.ui.model.CombinedOperator$Impl@option = logical operation...
com.top_logic.model.search.ui.model.ContextFilter = is {name} ({type})
com.top_logic.model.search.ui.model.ContextFilter.context-expression = context object
com.top_logic.model.search.ui.model.ContextFilter@option = is {context-expression.name} ({context-expression.value-type})
com.top_logic.model.search.ui.model.FilterContainer.filters = filter
com.top_logic.model.search.ui.model.FilterContainer.name = Name
com.top_logic.model.search.ui.model.IncomingReferenceFilter = Object is used in {reference} for which: {comparisons}
com.top_logic.model.search.ui.model.IncomingReferenceFilter.reference = reference
com.top_logic.model.search.ui.model.IncomingReferenceFilter@option = {reference | {referenced in...}}
com.top_logic.model.search.ui.model.IncomingReferenceStep = \u2190 is used in {reference} ({value-type}) {next}
com.top_logic.model.search.ui.model.IncomingReferenceStep.reference = Reference
com.top_logic.model.search.ui.model.IncomingReferenceStep@option = {reference | {referenced in...}}
com.top_logic.model.search.ui.model.NavigatingFilter.comparisons = comparison
com.top_logic.model.search.ui.model.NavigationValue = {base} {next}
com.top_logic.model.search.ui.model.NavigationValue.base = Base object
com.top_logic.model.search.ui.model.NavigationValue@option = Parameter / Variable ...
com.top_logic.model.search.ui.model.OperatorContainer.comparisons = comparison
com.top_logic.model.search.ui.model.PredefinedReferenceValue = {translation} ({value-type})
com.top_logic.model.search.ui.model.QueryValue = {part} of {name} ({value-type}) for which from sub search {filters}
com.top_logic.model.search.ui.model.QueryValue.part = Property
com.top_logic.model.search.ui.model.QueryValue@option = Property comparison
com.top_logic.model.search.ui.model.ReferenceValue = {name} ({value-type})
com.top_logic.model.search.ui.model.Search.unions = Unions
com.top_logic.model.search.ui.model.Search.unions@empty = Search...
com.top_logic.model.search.ui.model.Search.unions@first = Search for\ 
com.top_logic.model.search.ui.model.Search.unions@next = combined with\ 
com.top_logic.model.search.ui.model.SubQuery = sub-search for {name} ({context-type}) for which: {filters}
com.top_logic.model.search.ui.model.SubQuery@option = Search
com.top_logic.model.search.ui.model.TupleSearch = Correlation of: {coords}
com.top_logic.model.search.ui.model.TupleSearch$CoordDef = Coordinate {name} ({nullable}): {expr}
com.top_logic.model.search.ui.model.TupleSearch$CoordDef$InlineTypeSearch = {type} {name}: {filters}
com.top_logic.model.search.ui.model.TupleSearch.CoordDef.name = Coordinate name
com.top_logic.model.search.ui.model.TupleSearch.CoordDef.nullable = Nullable
com.top_logic.model.search.ui.model.TupleSearch.NullableSpec.MANDATORY = mandatory
com.top_logic.model.search.ui.model.TupleSearch.NullableSpec.NULLABLE = optional
com.top_logic.model.search.ui.model.TupleSearch.coords = Coordinates
com.top_logic.model.search.ui.model.TupleSearch@option = Correlation...
com.top_logic.model.search.ui.model.TypeCheckStep = is a {type-cast} {next}
com.top_logic.model.search.ui.model.TypeCheckStep.type-cast = type
com.top_logic.model.search.ui.model.TypeCheckStep@option = is a...
com.top_logic.model.search.ui.model.TypeSearch = {type} {name} for which: {filters}
com.top_logic.model.search.ui.model.TypeSearch@option = Type...
com.top_logic.model.search.ui.model.combinator.AllSearchExpressionCombinator = all hold
com.top_logic.model.search.ui.model.combinator.NoneSearchExpressionCombinator = none holds
com.top_logic.model.search.ui.model.combinator.NotAllSearchExpressionCombinator = one doesn't hold
com.top_logic.model.search.ui.model.combinator.NotNoneSearchExpressionCombinator = one holds
com.top_logic.model.search.ui.model.literal.LiteralBooleanValue@option = Value input
com.top_logic.model.search.ui.model.literal.LiteralDateTimeValue@option = Value input
com.top_logic.model.search.ui.model.literal.LiteralDateValue@option = Value input
com.top_logic.model.search.ui.model.literal.LiteralFloatValue@option = Value input
com.top_logic.model.search.ui.model.literal.LiteralIntegerValue@option = Value input
com.top_logic.model.search.ui.model.literal.LiteralObjectSet = {objects} ({context-type})
com.top_logic.model.search.ui.model.literal.LiteralObjectSet.objects = Comparison values
com.top_logic.model.search.ui.model.literal.LiteralObjectSet@option = Value input
com.top_logic.model.search.ui.model.literal.LiteralObjectValue = {object} ({context-type})
com.top_logic.model.search.ui.model.literal.LiteralObjectValue.object = Comparison value
com.top_logic.model.search.ui.model.literal.LiteralObjectValue@option = Value input
com.top_logic.model.search.ui.model.literal.LiteralPrimitiveValue.compare-value = Comparison value
com.top_logic.model.search.ui.model.literal.LiteralStringValue@option = Value input
com.top_logic.model.search.ui.model.operator.AbstractStringCompare.case-sensitive = case sensitive
com.top_logic.model.search.ui.model.operator.BooleanCompare$Impl = {kind} {comparison-value}
com.top_logic.model.search.ui.model.operator.BooleanCompare$Impl@option = {kind | {other operator...}}
com.top_logic.model.search.ui.model.operator.BooleanCompare.Kind = comparison
com.top_logic.model.search.ui.model.operator.BooleanCompare.Kind.EQUALS = is equal
com.top_logic.model.search.ui.model.operator.BooleanCompare.Kind.NOT_EQUALS = is not equal
com.top_logic.model.search.ui.model.operator.BooleanCompare.kind = operator
com.top_logic.model.search.ui.model.operator.ComparableCompare$Impl = {kind} {comparison-value}
com.top_logic.model.search.ui.model.operator.ComparableCompare$Impl@option = {kind | {other operator...}}
com.top_logic.model.search.ui.model.operator.ComparableRangeCompare$Impl = {kind} {lower-bound} and {upper-bound}
com.top_logic.model.search.ui.model.operator.ComparableRangeCompare$Impl@option = {kind}...
com.top_logic.model.search.ui.model.operator.ComparableRangeCompare.kind = Comparison
com.top_logic.model.search.ui.model.operator.DateCompare$Impl = {kind} {comparison-value}
com.top_logic.model.search.ui.model.operator.DateCompare$Impl@option = {kind | {other operator...}}
com.top_logic.model.search.ui.model.operator.DateRangeCompare$Impl = {kind} {lower-bound} and {upper-bound}
com.top_logic.model.search.ui.model.operator.DateRangeCompare$Impl@option = {kind}...
com.top_logic.model.search.ui.model.operator.DateRangeCompare.kind = Comparison
com.top_logic.model.search.ui.model.operator.Empty$Impl = empty
com.top_logic.model.search.ui.model.operator.Empty$Impl@option = empty
com.top_logic.model.search.ui.model.operator.FilterCompare$Impl = for {kind}: {name} ({context-type}) the following holds: {filters}
com.top_logic.model.search.ui.model.operator.FilterCompare$Impl@option = structure compare...
com.top_logic.model.search.ui.model.operator.FilterCompare.Kind.ALL = all
com.top_logic.model.search.ui.model.operator.FilterCompare.Kind.ONE = at least one
com.top_logic.model.search.ui.model.operator.FilterCompare.kind = Comparison
com.top_logic.model.search.ui.model.operator.FilterCompareSingleton$Impl = is {name} ({context-type}), for which: {filters}
com.top_logic.model.search.ui.model.operator.FilterCompareSingleton$Impl@option = structure compare...
com.top_logic.model.search.ui.model.operator.FloatCompare$Impl = is (correct to {precision} decimal places) {kind} {comparison-value}
com.top_logic.model.search.ui.model.operator.FloatCompare$Impl@option = {kind | {other operator...}}
com.top_logic.model.search.ui.model.operator.FloatCompare.Kind = comparison
com.top_logic.model.search.ui.model.operator.FloatCompare.Kind.EQUALS = equal
com.top_logic.model.search.ui.model.operator.FloatCompare.Kind.GE = greater than
com.top_logic.model.search.ui.model.operator.FloatCompare.Kind.GT = greater than (exclusive)
com.top_logic.model.search.ui.model.operator.FloatCompare.Kind.LE = less than
com.top_logic.model.search.ui.model.operator.FloatCompare.Kind.LT = less than (exclusive)
com.top_logic.model.search.ui.model.operator.FloatCompare.Kind.NOT_EQUALS = not equal
com.top_logic.model.search.ui.model.operator.FloatCompare.kind = operator
com.top_logic.model.search.ui.model.operator.FloatRangeCompare$Impl = {kind} {lower-bound} and {upper-bound} (correct to {precision} decimal places)
com.top_logic.model.search.ui.model.operator.FloatRangeCompare$Impl@option = {kind}...
com.top_logic.model.search.ui.model.operator.FloatRangeCompare.kind = Comparison
com.top_logic.model.search.ui.model.operator.IntegerCompare$Impl = {kind} {comparison-value}
com.top_logic.model.search.ui.model.operator.IntegerCompare$Impl@option = {kind | {other operator...}}
com.top_logic.model.search.ui.model.operator.IntegerCompare.Kind = comparison
com.top_logic.model.search.ui.model.operator.IntegerCompare.Kind.EQUALS = is equal
com.top_logic.model.search.ui.model.operator.IntegerCompare.Kind.GE = greater than
com.top_logic.model.search.ui.model.operator.IntegerCompare.Kind.GT = greater than (exclusive)
com.top_logic.model.search.ui.model.operator.IntegerCompare.Kind.LE = less than
com.top_logic.model.search.ui.model.operator.IntegerCompare.Kind.LT = less than (exclusive)
com.top_logic.model.search.ui.model.operator.IntegerCompare.Kind.NOT_EQUALS = is not equal
com.top_logic.model.search.ui.model.operator.IntegerCompare.kind = operator
com.top_logic.model.search.ui.model.operator.IntegerRangeCompare$Impl = {kind} {lower-bound} and {upper-bound}
com.top_logic.model.search.ui.model.operator.IntegerRangeCompare$Impl@option = {kind}...
com.top_logic.model.search.ui.model.operator.IntegerRangeCompare.kind = Comparison
com.top_logic.model.search.ui.model.operator.NotEmpty$Impl = not empty
com.top_logic.model.search.ui.model.operator.NotEmpty$Impl@option = not empty
com.top_logic.model.search.ui.model.operator.PrimitiveCompare.kind = Comparison kind
com.top_logic.model.search.ui.model.operator.PrimitiveCompareKind = comparison
com.top_logic.model.search.ui.model.operator.PrimitiveCompareKind.EQUALS = is equal
com.top_logic.model.search.ui.model.operator.PrimitiveCompareKind.GE = after
com.top_logic.model.search.ui.model.operator.PrimitiveCompareKind.GT = after (exclusive)
com.top_logic.model.search.ui.model.operator.PrimitiveCompareKind.LE = before
com.top_logic.model.search.ui.model.operator.PrimitiveCompareKind.LT = before (exclusive)
com.top_logic.model.search.ui.model.operator.PrimitiveCompareKind.NOT_EQUALS = is not equal
com.top_logic.model.search.ui.model.operator.RangeCompareKind.IN_RANGE = between
com.top_logic.model.search.ui.model.operator.RangeCompareKind.NOT_IN_RANGE = not between
com.top_logic.model.search.ui.model.operator.SetCompare$Impl = {operation} {compare-objects}
com.top_logic.model.search.ui.model.operator.SetCompare$Impl@option = {operation | {set comparison...}}
com.top_logic.model.search.ui.model.operator.SetCompare.Operation.ALL_CONTAINED_IN = contains only
com.top_logic.model.search.ui.model.operator.SetCompare.Operation.CONTAINS_ALL = contains all of
com.top_logic.model.search.ui.model.operator.SetCompare.Operation.CONTAINS_NONE = contains none of
com.top_logic.model.search.ui.model.operator.SetCompare.Operation.CONTAINS_SOME = contains at least one of
com.top_logic.model.search.ui.model.operator.SetCompare.Operation.EQUALS = is equal to
com.top_logic.model.search.ui.model.operator.SetCompare.Operation.NOT_ALL_CONTAINED_IN = contains not only
com.top_logic.model.search.ui.model.operator.SetCompare.Operation.NOT_CONTAINS_ALL = contains not all of
com.top_logic.model.search.ui.model.operator.SetCompare.Operation.NOT_EQUALS = is not equal to
com.top_logic.model.search.ui.model.operator.SetCompare.compare-objects = compare set
com.top_logic.model.search.ui.model.operator.SetCompare.operation = set comparison
com.top_logic.model.search.ui.model.operator.SingletonCompare$Impl = {operation} {compare-objects}
com.top_logic.model.search.ui.model.operator.SingletonCompare$Impl@option = {operation | {reference comparison...}}
com.top_logic.model.search.ui.model.operator.SingletonCompare.compare-objects = comparison set
com.top_logic.model.search.ui.model.operator.SingletonCompare.operation = reference comparison
com.top_logic.model.search.ui.model.operator.SingletonCompareOperation.CONTAINED_IN = contained in
com.top_logic.model.search.ui.model.operator.SingletonCompareOperation.EQUALS = is equal to
com.top_logic.model.search.ui.model.operator.SingletonCompareOperation.NOT_CONTAINED_IN = not contained in
com.top_logic.model.search.ui.model.operator.SingletonCompareOperation.NOT_EQUALS = is not equal to
com.top_logic.model.search.ui.model.operator.StringCompare$Impl = {kind} {comparison-value} ({case-sensitive} {case-sensitive:label})
com.top_logic.model.search.ui.model.operator.StringCompare$Impl@option = {kind | {other operator...}}
com.top_logic.model.search.ui.model.operator.StringCompare.Kind = comparison
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.CONTAINS = contains the text
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.ENDS_WITH = ends with the text
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.EQUALS = is equal
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.GE = lexicographically after
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.GT = lexicographically after (exclusive)
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.LE = lexicographically before
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.LT = lexicographically before (exclusive)
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.NOT_CONTAINS = does not contain the text
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.NOT_ENDS_WITH = does not end with the text
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.NOT_EQUALS = is not equal
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.NOT_STARTS_WITH = does not start with the text
com.top_logic.model.search.ui.model.operator.StringCompare.Kind.STARTS_WITH = starts with the text
com.top_logic.model.search.ui.model.operator.StringCompare.kind = operator
com.top_logic.model.search.ui.model.operator.StringCompare.reg-exp = compare as pattern
com.top_logic.model.search.ui.model.operator.StringRangeCompare$Impl = {kind} {lower-bound} and {upper-bound} ({case-sensitive} {case-sensitive:label})
com.top_logic.model.search.ui.model.operator.StringRangeCompare$Impl@option = {kind}...
com.top_logic.model.search.ui.model.operator.StringRangeCompare.kind = Comparison
com.top_logic.model.search.ui.model.operator.TypeCheck$Impl = is a {type-cast} ({name}) for which: {filters}
com.top_logic.model.search.ui.model.operator.TypeCheck$Impl@option = is a...
com.top_logic.model.search.ui.model.operator.TypeCheck.type-cast = type
element.typename.SearchExpressionStructure.SearchExpressionImpl = Search Expression
expert.search.tab = Expert
gui.search.tab = Normal
layout.com.top_logic.element.transaction.template.Form = Input form
layouts.com.top_logic.model.search.admin.scriptConsole.tab = Script console
layouts.com.top_logic.model.search.admin.scriptConsole.title = Script
layouts.model.search.modelSearch.SaveSearchAsForm.name = Name
layouts.model.search.modelSearch.SaveSearchAsForm.publishGroup = Information for the publication
layouts.model.search.modelSearch.SaveSearchAsForm.publishGroup.publishQuery = Publish
layouts.model.search.modelSearch.SaveSearchAsForm.publishGroup.visibleGroups = Groups
layouts.model.search.modelSearch.SearchComponent.options = Choose option
layouts.model.search.modelSearch.SearchComponent.refreshSearch = Update Search Results
layouts.model.search.modelSearch.SearchComponent.remove = Remove
layouts.model.search.modelSearch.SearchComponent.title = Search Query
layouts.model.search.modelSearch.SearchResultTable.title = Result
layouts.model.search.modelSearch.SearchSelectorComponent.displayDialog_SaveSearchAs = Save as...
layouts.model.search.modelSearch.SearchSelectorComponent.displayDialog_SaveSearchAs.title = Save as...
layouts.model.search.modelSearch.SearchSelectorComponent.displayDialog_SaveSearchAs.tooltip = Opens a dialog to save the search-expression under a new name and optionally publish it.
layouts.model.search.modelSearch.SearchSelectorComponent.expressionSelector = Search expression
layouts.model.search.modelSearch.SearchSelectorComponent.publishQuery = Published
layouts.model.search.modelSearch.SearchSelectorComponent.title = Search expression
layouts.model.search.modelSearch.SearchSelectorComponent.visibleGroups = Groups
model.search.expert.title = Editor
tl.command.deleteModelSearch = Delete
tl.command.executeSearchConsole = Execute script
tl.command.executeSearchConsole.tooltip = Executes the entered script and displays the result in the result table. Data modifying operations are not allowed.
tl.command.refreshSearch = Update search results
tl.command.resetModelSearch = Reset
tl.command.saveModelSearch = Save
tl.command.saveModelSearchAs = Save
tl.command.updateSearchConsole = Execute script and commit changes.
tl.command.updateSearchConsole.tooltip = Executes the entered script and displays the result in the result table. If any data is changed by the evaluation, it is persisted.
