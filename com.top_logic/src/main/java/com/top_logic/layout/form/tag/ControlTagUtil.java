/*
 * SPDX-FileCopyrightText: 2008 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.layout.form.tag;

import java.io.IOException;

import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.Tag;
import javax.servlet.jsp.tagext.TagSupport;

import com.top_logic.base.services.simpleajax.HTMLFragment;
import com.top_logic.basic.xml.TagWriter;
import com.top_logic.layout.Control;
import com.top_logic.layout.basic.DefaultDisplayContext;

/**
 * Utilities for {@link Tag}s creating {@link Control}s.
 * 
 * @author <a href="mailto:bhu@top-logic.com">Bernhard Haumacher</a>
 */
public class ControlTagUtil {

	public static void writeControl(AbstractTag self, PageContext pageContext, HTMLFragment control)
			throws IOException {
		writeControl(self.getOut(), self, pageContext, control);
	}

	public static void writeControl(TagWriter out, Tag self, PageContext pageContext, HTMLFragment control)
			throws IOException {
		ControlBodyTag compositeTag = 
			(ControlBodyTag) TagSupport.findAncestorWithClass(self, ControlBodyTag.class);
		if (compositeTag != null) {
			// Rendering occurs within a composite tag that builds a renderer
			// for a composite control. Only write a placeholder and add the
			// control created by this tag to the composite.
			String replacementString = compositeTag.addControl(control);
			if (replacementString != null) {
				// Note: To be able to capture contents generated by a tag by switching the
				// TagWriter output, the tag must not directly write to the JSP writer, but must use
				// the TagWriter, even for writing pre-rendered XML.
				out.writeContent(replacementString);
			}
		} else {
			control.write(DefaultDisplayContext.getDisplayContext(pageContext), out);
		}
	}

}
