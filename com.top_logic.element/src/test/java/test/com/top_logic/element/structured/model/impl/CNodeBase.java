/*
 * SPDX-FileCopyrightText: 2025 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package test.com.top_logic.element.structured.model.impl;

/**
 * Basic interface for {@link #C_NODE_TYPE} business objects.
 * 
 * @author Automatically generated by {@link com.top_logic.element.model.generate.InterfaceGenerator}
 */
public interface CNodeBase extends test.com.top_logic.element.structured.model.A, test.com.top_logic.element.structured.model.ANodeChild, test.com.top_logic.element.structured.model.BNodeChild {

	/**
	 * Name of type <code>CNode</code>
	 */
	String C_NODE_TYPE = "CNode";

	/**
	 * Part <code>compositeReferenceMulti</code> of <code>CNode</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:CContent</code> in configuration.
	 * </p>
	 */
	String COMPOSITE_REFERENCE_MULTI_ATTR = "compositeReferenceMulti";

	/**
	 * Part <code>historicReferenceMulti</code> of <code>CNode</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:A</code> in configuration.
	 * </p>
	 */
	String HISTORIC_REFERENCE_MULTI_ATTR = "historicReferenceMulti";

	/**
	 * Part <code>historicReferenceSingle</code> of <code>CNode</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:A</code> in configuration.
	 * </p>
	 */
	String HISTORIC_REFERENCE_SINGLE_ATTR = "historicReferenceSingle";

	/**
	 * Part <code>mixedReferenceMulti</code> of <code>CNode</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:A</code> in configuration.
	 * </p>
	 */
	String MIXED_REFERENCE_MULTI_ATTR = "mixedReferenceMulti";

	/**
	 * Part <code>mixedReferenceSingle</code> of <code>CNode</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:A</code> in configuration.
	 * </p>
	 */
	String MIXED_REFERENCE_SINGLE_ATTR = "mixedReferenceSingle";

	/**
	 * Getter for part {@link #COMPOSITE_REFERENCE_MULTI_ATTR}.
	 */
	@SuppressWarnings("unchecked")
	default java.util.List<? extends test.com.top_logic.element.structured.model.CContent> getCompositeReferenceMulti() {
		return (java.util.List<? extends test.com.top_logic.element.structured.model.CContent>) tValueByName(COMPOSITE_REFERENCE_MULTI_ATTR);
	}

	/**
	 * Live view of the {@link #COMPOSITE_REFERENCE_MULTI_ATTR} part.
	 * <p>
	 * Changes to this {@link java.util.Collection} change directly the attribute value.
	 * The caller has to take care of the transaction handling.
	 * </p>
	 */
	default java.util.List<test.com.top_logic.element.structured.model.CContent> getCompositeReferenceMultiModifiable() {
		com.top_logic.model.TLStructuredTypePart attribute = tType().getPart(COMPOSITE_REFERENCE_MULTI_ATTR);
		@SuppressWarnings("unchecked")
		java.util.List<test.com.top_logic.element.structured.model.CContent> result = (java.util.List<test.com.top_logic.element.structured.model.CContent>) com.top_logic.element.meta.kbbased.WrapperMetaAttributeUtil.getLiveCollection(this, attribute);
		return result;
	}

	/**
	 * Setter for part {@link #COMPOSITE_REFERENCE_MULTI_ATTR}.
	 */
	default void setCompositeReferenceMulti(java.util.List<test.com.top_logic.element.structured.model.CContent> newValue) {
		tUpdateByName(COMPOSITE_REFERENCE_MULTI_ATTR, newValue);
	}

	/**
	 * Adds a value to the {@link #COMPOSITE_REFERENCE_MULTI_ATTR} reference.
	 */
	default void addCompositeReferenceMulti(test.com.top_logic.element.structured.model.CContent newValue) {
		tAddByName(COMPOSITE_REFERENCE_MULTI_ATTR, newValue);
	}

	/**
	 * Removes the given value from the {@link #COMPOSITE_REFERENCE_MULTI_ATTR} reference.
	 */
	default void removeCompositeReferenceMulti(test.com.top_logic.element.structured.model.CContent oldValue) {
		tRemoveByName(COMPOSITE_REFERENCE_MULTI_ATTR, oldValue);
	}

	/**
	 * Getter for part {@link #HISTORIC_REFERENCE_MULTI_ATTR}.
	 */
	@SuppressWarnings("unchecked")
	default java.util.List<? extends test.com.top_logic.element.structured.model.A> getHistoricReferenceMulti() {
		return (java.util.List<? extends test.com.top_logic.element.structured.model.A>) tValueByName(HISTORIC_REFERENCE_MULTI_ATTR);
	}

	/**
	 * Live view of the {@link #HISTORIC_REFERENCE_MULTI_ATTR} part.
	 * <p>
	 * Changes to this {@link java.util.Collection} change directly the attribute value.
	 * The caller has to take care of the transaction handling.
	 * </p>
	 */
	default java.util.List<test.com.top_logic.element.structured.model.A> getHistoricReferenceMultiModifiable() {
		com.top_logic.model.TLStructuredTypePart attribute = tType().getPart(HISTORIC_REFERENCE_MULTI_ATTR);
		@SuppressWarnings("unchecked")
		java.util.List<test.com.top_logic.element.structured.model.A> result = (java.util.List<test.com.top_logic.element.structured.model.A>) com.top_logic.element.meta.kbbased.WrapperMetaAttributeUtil.getLiveCollection(this, attribute);
		return result;
	}

	/**
	 * Setter for part {@link #HISTORIC_REFERENCE_MULTI_ATTR}.
	 */
	default void setHistoricReferenceMulti(java.util.List<test.com.top_logic.element.structured.model.A> newValue) {
		tUpdateByName(HISTORIC_REFERENCE_MULTI_ATTR, newValue);
	}

	/**
	 * Adds a value to the {@link #HISTORIC_REFERENCE_MULTI_ATTR} reference.
	 */
	default void addHistoricReferenceMulti(test.com.top_logic.element.structured.model.A newValue) {
		tAddByName(HISTORIC_REFERENCE_MULTI_ATTR, newValue);
	}

	/**
	 * Removes the given value from the {@link #HISTORIC_REFERENCE_MULTI_ATTR} reference.
	 */
	default void removeHistoricReferenceMulti(test.com.top_logic.element.structured.model.A oldValue) {
		tRemoveByName(HISTORIC_REFERENCE_MULTI_ATTR, oldValue);
	}

	/**
	 * Getter for part {@link #HISTORIC_REFERENCE_SINGLE_ATTR}.
	 */
	default test.com.top_logic.element.structured.model.A getHistoricReferenceSingle() {
		return (test.com.top_logic.element.structured.model.A) tValueByName(HISTORIC_REFERENCE_SINGLE_ATTR);
	}

	/**
	 * Setter for part {@link #HISTORIC_REFERENCE_SINGLE_ATTR}.
	 */
	default void setHistoricReferenceSingle(test.com.top_logic.element.structured.model.A newValue) {
		tUpdateByName(HISTORIC_REFERENCE_SINGLE_ATTR, newValue);
	}

	/**
	 * Getter for part {@link #MIXED_REFERENCE_MULTI_ATTR}.
	 */
	@SuppressWarnings("unchecked")
	default java.util.Set<? extends test.com.top_logic.element.structured.model.A> getMixedReferenceMulti() {
		return (java.util.Set<? extends test.com.top_logic.element.structured.model.A>) tValueByName(MIXED_REFERENCE_MULTI_ATTR);
	}

	/**
	 * Live view of the {@link #MIXED_REFERENCE_MULTI_ATTR} part.
	 * <p>
	 * Changes to this {@link java.util.Collection} change directly the attribute value.
	 * The caller has to take care of the transaction handling.
	 * </p>
	 */
	default java.util.Set<test.com.top_logic.element.structured.model.A> getMixedReferenceMultiModifiable() {
		com.top_logic.model.TLStructuredTypePart attribute = tType().getPart(MIXED_REFERENCE_MULTI_ATTR);
		@SuppressWarnings("unchecked")
		java.util.Set<test.com.top_logic.element.structured.model.A> result = (java.util.Set<test.com.top_logic.element.structured.model.A>) com.top_logic.element.meta.kbbased.WrapperMetaAttributeUtil.getLiveCollection(this, attribute);
		return result;
	}

	/**
	 * Setter for part {@link #MIXED_REFERENCE_MULTI_ATTR}.
	 */
	default void setMixedReferenceMulti(java.util.Set<test.com.top_logic.element.structured.model.A> newValue) {
		tUpdateByName(MIXED_REFERENCE_MULTI_ATTR, newValue);
	}

	/**
	 * Adds a value to the {@link #MIXED_REFERENCE_MULTI_ATTR} reference.
	 */
	default void addMixedReferenceMulti(test.com.top_logic.element.structured.model.A newValue) {
		tAddByName(MIXED_REFERENCE_MULTI_ATTR, newValue);
	}

	/**
	 * Removes the given value from the {@link #MIXED_REFERENCE_MULTI_ATTR} reference.
	 */
	default void removeMixedReferenceMulti(test.com.top_logic.element.structured.model.A oldValue) {
		tRemoveByName(MIXED_REFERENCE_MULTI_ATTR, oldValue);
	}

	/**
	 * Getter for part {@link #MIXED_REFERENCE_SINGLE_ATTR}.
	 */
	default test.com.top_logic.element.structured.model.A getMixedReferenceSingle() {
		return (test.com.top_logic.element.structured.model.A) tValueByName(MIXED_REFERENCE_SINGLE_ATTR);
	}

	/**
	 * Setter for part {@link #MIXED_REFERENCE_SINGLE_ATTR}.
	 */
	default void setMixedReferenceSingle(test.com.top_logic.element.structured.model.A newValue) {
		tUpdateByName(MIXED_REFERENCE_SINGLE_ATTR, newValue);
	}

}
