/*
 * SPDX-FileCopyrightText: 2025 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package test.com.top_logic.element.structured.model.impl;

/**
 * Basic interface for {@link #PRELOAD_TEST_TYPE} business objects.
 * 
 * @author Automatically generated by {@link com.top_logic.element.model.generate.InterfaceGenerator}
 */
public interface PreloadTestBase extends com.top_logic.model.TLObject {

	/**
	 * Name of type <code>PreloadTest</code>
	 */
	String PRELOAD_TEST_TYPE = "PreloadTest";

	/**
	 * Part <code>compositeList</code> of <code>PreloadTest</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:PreloadTest</code> in configuration.
	 * </p>
	 */
	String COMPOSITE_LIST_ATTR = "compositeList";

	/**
	 * Part <code>compositeSet</code> of <code>PreloadTest</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:PreloadTest</code> in configuration.
	 * </p>
	 */
	String COMPOSITE_SET_ATTR = "compositeSet";

	/**
	 * Part <code>inline</code> of <code>PreloadTest</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:PreloadTest</code> in configuration.
	 * </p>
	 */
	String INLINE_ATTR = "inline";

	/**
	 * Part <code>inlineReverse</code> of <code>PreloadTest</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:PreloadTest</code> in configuration.
	 * </p>
	 */
	String INLINE_REVERSE_ATTR = "inlineReverse";

	/**
	 * Part <code>linkList</code> of <code>PreloadTest</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:PreloadTest</code> in configuration.
	 * </p>
	 */
	String LINK_LIST_ATTR = "linkList";

	/**
	 * Part <code>linkSet</code> of <code>PreloadTest</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:PreloadTest</code> in configuration.
	 * </p>
	 */
	String LINK_SET_ATTR = "linkSet";

	/**
	 * Part <code>singletonLink</code> of <code>PreloadTest</code>
	 * 
	 * <p>
	 * Declared as <code>TestTypes:PreloadTest</code> in configuration.
	 * </p>
	 */
	String SINGLETON_LINK_ATTR = "singletonLink";

	/**
	 * Getter for part {@link #COMPOSITE_LIST_ATTR}.
	 */
	@SuppressWarnings("unchecked")
	default java.util.List<? extends test.com.top_logic.element.structured.model.PreloadTest> getCompositeList() {
		return (java.util.List<? extends test.com.top_logic.element.structured.model.PreloadTest>) tValueByName(COMPOSITE_LIST_ATTR);
	}

	/**
	 * Live view of the {@link #COMPOSITE_LIST_ATTR} part.
	 * <p>
	 * Changes to this {@link java.util.Collection} change directly the attribute value.
	 * The caller has to take care of the transaction handling.
	 * </p>
	 */
	default java.util.List<test.com.top_logic.element.structured.model.PreloadTest> getCompositeListModifiable() {
		com.top_logic.model.TLStructuredTypePart attribute = tType().getPart(COMPOSITE_LIST_ATTR);
		@SuppressWarnings("unchecked")
		java.util.List<test.com.top_logic.element.structured.model.PreloadTest> result = (java.util.List<test.com.top_logic.element.structured.model.PreloadTest>) com.top_logic.element.meta.kbbased.WrapperMetaAttributeUtil.getLiveCollection(this, attribute);
		return result;
	}

	/**
	 * Setter for part {@link #COMPOSITE_LIST_ATTR}.
	 */
	default void setCompositeList(java.util.List<test.com.top_logic.element.structured.model.PreloadTest> newValue) {
		tUpdateByName(COMPOSITE_LIST_ATTR, newValue);
	}

	/**
	 * Adds a value to the {@link #COMPOSITE_LIST_ATTR} reference.
	 */
	default void addCompositeList(test.com.top_logic.element.structured.model.PreloadTest newValue) {
		tAddByName(COMPOSITE_LIST_ATTR, newValue);
	}

	/**
	 * Removes the given value from the {@link #COMPOSITE_LIST_ATTR} reference.
	 */
	default void removeCompositeList(test.com.top_logic.element.structured.model.PreloadTest oldValue) {
		tRemoveByName(COMPOSITE_LIST_ATTR, oldValue);
	}

	/**
	 * Getter for part {@link #COMPOSITE_SET_ATTR}.
	 */
	@SuppressWarnings("unchecked")
	default java.util.Set<? extends test.com.top_logic.element.structured.model.PreloadTest> getCompositeSet() {
		return (java.util.Set<? extends test.com.top_logic.element.structured.model.PreloadTest>) tValueByName(COMPOSITE_SET_ATTR);
	}

	/**
	 * Live view of the {@link #COMPOSITE_SET_ATTR} part.
	 * <p>
	 * Changes to this {@link java.util.Collection} change directly the attribute value.
	 * The caller has to take care of the transaction handling.
	 * </p>
	 */
	default java.util.Set<test.com.top_logic.element.structured.model.PreloadTest> getCompositeSetModifiable() {
		com.top_logic.model.TLStructuredTypePart attribute = tType().getPart(COMPOSITE_SET_ATTR);
		@SuppressWarnings("unchecked")
		java.util.Set<test.com.top_logic.element.structured.model.PreloadTest> result = (java.util.Set<test.com.top_logic.element.structured.model.PreloadTest>) com.top_logic.element.meta.kbbased.WrapperMetaAttributeUtil.getLiveCollection(this, attribute);
		return result;
	}

	/**
	 * Setter for part {@link #COMPOSITE_SET_ATTR}.
	 */
	default void setCompositeSet(java.util.Set<test.com.top_logic.element.structured.model.PreloadTest> newValue) {
		tUpdateByName(COMPOSITE_SET_ATTR, newValue);
	}

	/**
	 * Adds a value to the {@link #COMPOSITE_SET_ATTR} reference.
	 */
	default void addCompositeSet(test.com.top_logic.element.structured.model.PreloadTest newValue) {
		tAddByName(COMPOSITE_SET_ATTR, newValue);
	}

	/**
	 * Removes the given value from the {@link #COMPOSITE_SET_ATTR} reference.
	 */
	default void removeCompositeSet(test.com.top_logic.element.structured.model.PreloadTest oldValue) {
		tRemoveByName(COMPOSITE_SET_ATTR, oldValue);
	}

	/**
	 * Getter for part {@link #INLINE_ATTR}.
	 */
	default test.com.top_logic.element.structured.model.PreloadTest getInline() {
		return (test.com.top_logic.element.structured.model.PreloadTest) tValueByName(INLINE_ATTR);
	}

	/**
	 * Setter for part {@link #INLINE_ATTR}.
	 */
	default void setInline(test.com.top_logic.element.structured.model.PreloadTest newValue) {
		tUpdateByName(INLINE_ATTR, newValue);
	}

	/**
	 * Getter for part {@link #INLINE_REVERSE_ATTR}.
	 */
	default test.com.top_logic.element.structured.model.PreloadTest getInlineReverse() {
		return (test.com.top_logic.element.structured.model.PreloadTest) tValueByName(INLINE_REVERSE_ATTR);
	}

	/**
	 * Setter for part {@link #INLINE_REVERSE_ATTR}.
	 */
	default void setInlineReverse(test.com.top_logic.element.structured.model.PreloadTest newValue) {
		tUpdateByName(INLINE_REVERSE_ATTR, newValue);
	}

	/**
	 * Getter for part {@link #LINK_LIST_ATTR}.
	 */
	@SuppressWarnings("unchecked")
	default java.util.List<? extends test.com.top_logic.element.structured.model.PreloadTest> getLinkList() {
		return (java.util.List<? extends test.com.top_logic.element.structured.model.PreloadTest>) tValueByName(LINK_LIST_ATTR);
	}

	/**
	 * Live view of the {@link #LINK_LIST_ATTR} part.
	 * <p>
	 * Changes to this {@link java.util.Collection} change directly the attribute value.
	 * The caller has to take care of the transaction handling.
	 * </p>
	 */
	default java.util.List<test.com.top_logic.element.structured.model.PreloadTest> getLinkListModifiable() {
		com.top_logic.model.TLStructuredTypePart attribute = tType().getPart(LINK_LIST_ATTR);
		@SuppressWarnings("unchecked")
		java.util.List<test.com.top_logic.element.structured.model.PreloadTest> result = (java.util.List<test.com.top_logic.element.structured.model.PreloadTest>) com.top_logic.element.meta.kbbased.WrapperMetaAttributeUtil.getLiveCollection(this, attribute);
		return result;
	}

	/**
	 * Setter for part {@link #LINK_LIST_ATTR}.
	 */
	default void setLinkList(java.util.List<test.com.top_logic.element.structured.model.PreloadTest> newValue) {
		tUpdateByName(LINK_LIST_ATTR, newValue);
	}

	/**
	 * Adds a value to the {@link #LINK_LIST_ATTR} reference.
	 */
	default void addLinkList(test.com.top_logic.element.structured.model.PreloadTest newValue) {
		tAddByName(LINK_LIST_ATTR, newValue);
	}

	/**
	 * Removes the given value from the {@link #LINK_LIST_ATTR} reference.
	 */
	default void removeLinkList(test.com.top_logic.element.structured.model.PreloadTest oldValue) {
		tRemoveByName(LINK_LIST_ATTR, oldValue);
	}

	/**
	 * Getter for part {@link #LINK_SET_ATTR}.
	 */
	@SuppressWarnings("unchecked")
	default java.util.Set<? extends test.com.top_logic.element.structured.model.PreloadTest> getLinkSet() {
		return (java.util.Set<? extends test.com.top_logic.element.structured.model.PreloadTest>) tValueByName(LINK_SET_ATTR);
	}

	/**
	 * Live view of the {@link #LINK_SET_ATTR} part.
	 * <p>
	 * Changes to this {@link java.util.Collection} change directly the attribute value.
	 * The caller has to take care of the transaction handling.
	 * </p>
	 */
	default java.util.Set<test.com.top_logic.element.structured.model.PreloadTest> getLinkSetModifiable() {
		com.top_logic.model.TLStructuredTypePart attribute = tType().getPart(LINK_SET_ATTR);
		@SuppressWarnings("unchecked")
		java.util.Set<test.com.top_logic.element.structured.model.PreloadTest> result = (java.util.Set<test.com.top_logic.element.structured.model.PreloadTest>) com.top_logic.element.meta.kbbased.WrapperMetaAttributeUtil.getLiveCollection(this, attribute);
		return result;
	}

	/**
	 * Setter for part {@link #LINK_SET_ATTR}.
	 */
	default void setLinkSet(java.util.Set<test.com.top_logic.element.structured.model.PreloadTest> newValue) {
		tUpdateByName(LINK_SET_ATTR, newValue);
	}

	/**
	 * Adds a value to the {@link #LINK_SET_ATTR} reference.
	 */
	default void addLinkSet(test.com.top_logic.element.structured.model.PreloadTest newValue) {
		tAddByName(LINK_SET_ATTR, newValue);
	}

	/**
	 * Removes the given value from the {@link #LINK_SET_ATTR} reference.
	 */
	default void removeLinkSet(test.com.top_logic.element.structured.model.PreloadTest oldValue) {
		tRemoveByName(LINK_SET_ATTR, oldValue);
	}

	/**
	 * Getter for part {@link #SINGLETON_LINK_ATTR}.
	 */
	default test.com.top_logic.element.structured.model.PreloadTest getSingletonLink() {
		return (test.com.top_logic.element.structured.model.PreloadTest) tValueByName(SINGLETON_LINK_ATTR);
	}

	/**
	 * Setter for part {@link #SINGLETON_LINK_ATTR}.
	 */
	default void setSingletonLink(test.com.top_logic.element.structured.model.PreloadTest newValue) {
		tUpdateByName(SINGLETON_LINK_ATTR, newValue);
	}

}
