<?xml version="1.0" encoding="utf-8" ?>

<config:template-call
	xmlns:config="http://www.top-logic.com/ns/config/6.0"
	final="true"
	template="com.top_logic.element/grid.template.xml"
>
	<arguments
		defaultColumns="name"
		partnerGroup="dbTables"
		type="tl.model.db:Entity"
	>
		<dialogs>
			<layout-reference resource="admin/studio/oRMapping/scheme/createObject/dialog.layout.xml"/>
		</dialogs>
		<name key="dynamic.8876fc67-80a2-4791-90a9-03076375a9a3">
			<en>Tables</en>
			<de>Tabellen</de>
		</name>
		<modelBuilder class="com.top_logic.model.search.providers.ListModelByExpression"
			elements="model->all(`tl.model.db:Entity`)"
			supportsElement="element->$element.instanceOf(`tl.model.db:Entity`)"
		/>
		<buttons>
			<button id="exportExcelGrid"
				class="com.top_logic.layout.table.export.StreamingExcelExportHandler"
			/>
			<button id="deleteRow"
				class="com.top_logic.layout.component.GenericDeleteCommandHandler"
				target="selection(self())"
			/>
			<button id="ID_f94f5cbf_9a59_49dc_998c_dfc1efba9e68"
				class="com.top_logic.model.search.providers.CommandHandlerByExpression"
				image="css:fas fa-sync"
			>
				<resourceKey key="dynamic.4308c4bf-8465-47cb-bf71-47630cb5e620">
					<en>Load application schema</en>
					<de>Anwendungsschema laden</de>
				</resourceKey>
				<operation><![CDATA[{
defs = dbConfig()["meta-objects"]["metaobjects"].values();

// Allocate entities
existingParts = all(`tl.model.db:Part`).indexBy(p -> $p.get(`tl.model.db:Part#name`));
newParts = $defs
    .filter(def -> $existingParts[$def["object_name"]] == null)
    .map(def -> 
        switch ($def["$tag"]) {
            "metaobject": new(`tl.model.db:Table`)
                ..set(`tl.model.db:Table#name`, $def["object_name"]);
            "association": new(`tl.model.db:Table`)
                ..set(`tl.model.db:Table#name`, $def["object_name"]);
            "alternative": new(`tl.model.db:Alternative`)
                ..set(`tl.model.db:Alternative#name`, $def["object_name"]);
        }
    )
    .filter(p -> $p != null);

// All available table types
allParts = $existingParts.values().concat($newParts).indexBy(p -> $p.get(`tl.model.db:Part#name`));

// Update table type properties
$defs.foreach(def -> {
    entity = $allParts[$def["object_name"]];
    tag = $def["$tag"];
    switch {
        $tag == "metaobject" || $tag == "association": 
            $entity
            ..set(`tl.model.db:Table#abstract`, $def["abstract"] || false)
            ..set(`tl.model.db:Table#versioned`, switch($def["versioned"].toString()) {
                "TRUE": true;
                "FALSE": false;
                "DEFAULT": null;
            })
            ..set(`tl.model.db:Table#extends`, $allParts[$def["super_class"]])
            ..set(`tl.model.db:Table#columns`, $def["attributes"]
                .filter(att -> $att["$class"] != "com.top_logic.dob.attr.ComputedMOAttribute")
                .map(att -> switch ($att["$tag"]) {
                    "mo_attribute": new(`tl.model.db:Column`)
                        ..set(`tl.model.db:Column#name`, $att["att_name"])
                        ..set(`tl.model.db:Column#mandatory`, $att["mandatory"])
                        ..set(`tl.model.db:Column#initial`, $att["initial"])
                        ..set(`tl.model.db:Column#immutable`, $att["immutable"])
                        ..set(`tl.model.db:Column#system`, $att["system"])
                        ..set(`tl.model.db:Column#type`, switch ($att["att_type"].toString()) {
                            "String": "string";
                            "Boolean": "boolean";
                            "Integer": "int";
                            "Short": "short";
                            "Long": "long";
                            "ID": "id";
                            "Byte": "byte";
                            "Blob": "blob";
                            "Clob": "clob";
                            "Character": "char";
                            "Float": "float";
                            "Double": "double";
                            "Timestamp": "datetime";
                            "Day": "date";
                            "Time": "time";
                            default: throw("Unknown attribute type: " + $att["att_type"].toString() + " in " + $def["object_name"]);
                        });
                    "destination":
                        new(`tl.model.db:Reference`)
                        ..set(`tl.model.db:Reference#name`, $att["att_name"])
                        ..set(`tl.model.db:Reference#mandatory`, $att["mandatory"])
                        ..set(`tl.model.db:Reference#type`, $allParts[$att["target-type"]]);
                    "source":
                        new(`tl.model.db:Reference`)
                        ..set(`tl.model.db:Reference#name`, $att["att_name"])
                        ..set(`tl.model.db:Reference#mandatory`, $att["mandatory"])
                        ..set(`tl.model.db:Reference#type`, $allParts[$att["target-type"]]);
                    "reference": new(`tl.model.db:Reference`)
                        ..set(`tl.model.db:Reference#name`, $att["att_name"])
                        ..set(`tl.model.db:Reference#mandatory`, $att["mandatory"])
                        ..set(`tl.model.db:Reference#type`, $allParts[$att["target-type"]]);
                    default: throw("Unsupported attribute: " + $att);
                }));
        $tag == "alternative": 
            $entity
            ..set(`tl.model.db:Alternative#choices`, $def["specialisations"].map(s -> $allParts[$s["name"]]));
    }
});

createIndex = indexDef -> columns ->
    new(`tl.model.db:Index`)
        ..set(`tl.model.db:Index#columns`, 
            $indexDef["index-parts"].map(part -> {
                column = $columns[$part["name"]];
                switch ($column.type()) {
                    `tl.model.db:Column`: 
                        new(`tl.model.db:IndexPart`)
                            ..set(`tl.model.db:IndexPart#column`, $column);
                    `tl.model.db:Reference`: 
                        new(`tl.model.db:IndexPart`)
                            ..set(`tl.model.db:IndexPart#column`, $column)
                            ..set(`tl.model.db:IndexPart#aspect`, switch ($part["part"].toString()) {
                                "branch": `tl.model.db:ReferenceAspect#BRANCH`;
                                "name": `tl.model.db:ReferenceAspect#ID`;
                                "revision": `tl.model.db:ReferenceAspect#REVISION`;
                                "type": `tl.model.db:ReferenceAspect#TYPE`;
                            });
                    default: throw("Unsupported index part " + $part["name"] + " (columns: " + $columns.keySet() + ").");
                }
            })
        );

// Create indexes
$defs
    .filter(def -> $def["$tag"] == "metaobject")
    .foreach(def -> {
        entity = $allParts[$def["object_name"]];
        columns = $entity
            .recursion(e -> $e.get(`tl.model.db:Table#extends`))
            .get(`tl.model.db:Table#columns`)
            .flatten()
            .indexBy(c -> $c.get(`tl.model.db:Column#name`));

        $entity.get(`tl.model.db:Table#indices`).foreach(i -> $i.delete());
        $entity.set(`tl.model.db:Table#indices`, list());
        
        if ($def["primary-key"] != null, 
            $entity.add(`tl.model.db:Table#indices`, 
                $createIndex($def["primary-key"], $columns)
                    ..set(`tl.model.db:Index#name`, "PRIMARY")
                    ..set(`tl.model.db:Index#kind`, `tl.model.db:IndexKind#PRIMARY`)));
        
        $def["index"].foreach(indexDef -> 
            $entity.add(`tl.model.db:Table#indices`, 
                $createIndex($indexDef, $columns)
                    ..set(`tl.model.db:Index#name`, $indexDef["name"])
                    ..set(`tl.model.db:Index#kind`, $indexDef["unique"] ? 
                        `tl.model.db:IndexKind#UNIQUE` : 
                        `tl.model.db:IndexKind#SEARCH`)));
    });
}]]></operation>
			</button>
		</buttons>
	</arguments>
</config:template-call>