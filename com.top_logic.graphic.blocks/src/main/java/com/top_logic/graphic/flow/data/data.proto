package com.top_logic.graphic.flow.data;

option SharedGraph;
option NoXml;
option NoBinary;

@Operations("com.top_logic.graphic.flow.operations.WidgetOperations")
abstract message Widget {

	/** Custom CSS class to add to the SVG element. */
	@Nullable
	string cssClass;

	/**
	 * An arbitrary object that can be associated with this graphics elements.
	 */
	transient java.lang.Object userObject;
	
	/**
	 * Identifier to associate this graphics element to the client DOM.
	 */
	@Nullable
	transient string clientId;
}

/** Top-level element that can be rendered. */
@Operations("com.top_logic.graphic.flow.operations.DiagramOperations")
message Diagram extends Widget {
	/** The top-level diagram element. */
	Box root;
	
	@Ref
	repeated SelectableBox selection;
	
	transient com.top_logic.graphic.blocks.svg.event.Registration clickHandler;
	
}

/** A rectangular region of a {@link Diagram} that can adjust its size to external requests and to its content. */
@Operations("com.top_logic.graphic.flow.operations.BoxOperations")
abstract message Box extends Widget {
	/** The widget that contains/renders this widget. */
	@Container
	Widget parent;

	double x;
	double y;
	double width;
	double height;
}

/** A layout that allows to freely place boxes at arbitrary positions. The layout does not impose any restrictions to the positions and sizes of the placed boxes. */
@Operations("com.top_logic.graphic.flow.operations.layout.FloatingLayoutOperations")
message FloatingLayout extends Box {
	repeated Box nodes;
}

/** A layout that connects placed nodes with one-to-many connectors forming a tree. */
@Operations("com.top_logic.graphic.flow.operations.tree.TreeLayoutOperations")
message TreeLayout extends FloatingLayout {
	/** Whether to minimize vertical space required to layout the tree. */
	boolean compact;
	
	DiagramDirection direction;
	
	/** Horizontal gap between columns of tree nodes. */
	double gapX = 30;
	
	/** Vertical gap between nodes in a tree column. */
	double gapY = 30;

	/** Stroke style of tree connections. */	
	string strokeStyle = "black";
	
	/** Stroke width of tree connections. */	
	double thickness = 1.0;
	
	repeated TreeConnection connections;
}

/** A layout direction for a structured diagram. */
enum DiagramDirection {
	/** Diagram contents is layouted from left to right. */
	ltr;
	
	/** Diagram contents is layouted from right to left. */
	rtl; 
	
	/** Diagram contents is layouted from top to bottom. */
	topdown; 
	
	/** Diagram contents is layouted from bottom to top. */
	bottomup;
}

/** A connection in a {@link TreeLayout} that links contents of the diagram with one-to-many edges. */
@Operations("com.top_logic.graphic.flow.operations.tree.TreeConnectionOperations")
message TreeConnection extends Widget {
	/** The {@link TreeLayout} that is responsible for this connection. */
	@Container
	TreeLayout owner;
	
	/** The connector that is anchored to the parent node of the connection. */
	TreeConnector parent;

	/** The connectors that are anchored to the children nodes of the connection. */
	repeated TreeConnector children;
	
	/**
	 * The placement of the connection bar that represents the fan-out from the one parent to its many children. 
	 * The bar is rendered perpendicular to the line connecting the nodes with the bar. 
	 * The position of the bar is given as absolute coordinate (X or Y depending on the layout direction) within 
	 * the coordinate system of the {@link TreeLayout}.
	 */
	double barPosition;
}

@Operations("com.top_logic.graphic.flow.operations.tree.TreeConnectorOperations")
message TreeConnector extends Widget {
	@Container
	TreeConnection connection;

	/** The connected box. The box is expected to be part of some top-level node of the owning {@link TreeLayout}. */
	@Ref
	Box anchor;
	
	/** 
	 * The starting point of the connection within the {@link #anchor} box. 
	 * <p>
	 * The position describes the starting point by giving a percentage (0..1) of the length of the side of the {@link #anchor} box, where this connection is placed. 
	 * The side of the {@link #anchor} box where the connection starts depends on the {@link DiagramDirection} of the owning {@link TreeLayout}.
	 * </p>
	 */
	double connectPosition = 0.5;
}

@Operations("com.top_logic.graphic.flow.operations.TextOperations")
message Text extends Box {
	string value;
	
	@Nullable
	string fontWeight;

	@Nullable
	string fontSize;

	@Nullable
	string fontFamily;
	
	@Nullable
	string strokeStyle;

	@Nullable
	string fillStyle;
	
	double baseLine;
}

@Operations("com.top_logic.graphic.flow.operations.ImageOperations")
message Image extends Box {
	string href;
	double imgWidth;
	double imgHeight;
	ImageAlign align;
	ImageScale scale;
}

enum ImageAlign {

	/**
	 * Forces uniform scaling. Align the midpoint X value of the element's viewBox with the midpoint
	 * X value of the viewport. Align the midpoint Y value of the element's viewBox with the
	 * midpoint Y value of the viewport. This is the default value.
	 */
	xMidYMid;

	/**
	 * Forces uniform scaling. Align the <code>min-x</code> of the element's viewBox with the
	 * smallest X value of the viewport. Align the <code>min-y</code> of the element's viewBox with
	 * the smallest Y value of the viewport.
	 */
	xMinYMin;

	/**
	 * Forces uniform scaling. Align the midpoint X value of the element's viewBox with the midpoint
	 * X value of the viewport. Align the <code>min-y</code> of the element's viewBox with the
	 * smallest Y value of the viewport.
	 */
	xMidYMin;

	/**
	 * Forces uniform scaling. Align the <code>min-x</code>+<code>width</code> of the element's
	 * viewBox with the maximum X value of the viewport. Align the <code>min-y</code> of the
	 * element's viewBox with the smallest Y value of the viewport.
	 */
	xMaxYMin;

	/**
	 * Forces uniform scaling. Align the <code>min-x</code> of the element's viewBox with the
	 * smallest X value of the viewport. Align the midpoint Y value of the element's viewBox with
	 * the midpoint Y value of the viewport.
	 */
	xMinYMid;

	/**
	 * Forces uniform scaling. Align the <code>min-x</code>+<code>width</code> of the element's
	 * viewBox with the maximum X value of the viewport. Align the midpoint Y value of the element's
	 * viewBox with the midpoint Y value of the viewport.
	 */
	xMaxYMid;

	/**
	 * Forces uniform scaling. Align the <code>min-x</code> of the element's viewBox with the
	 * smallest X value of the viewport. Align the <code>min-y</code>+<code>height</code> of the
	 * element's viewBox with the maximum Y value of the viewport.
	 */
	xMinYMax;

	/**
	 * Forces uniform scaling. Align the midpoint X value of the element's viewBox with the midpoint
	 * X value of the viewport. Align the <code>min-y</code>+<code>height</code> of the element's
	 * viewBox with the maximum Y value of the viewport.
	 */
	xMidYMax;

	/**
	 * Forces uniform scaling. Align the <code>min-x</code>+<code>width</code> of the element's
	 * viewBox with the maximum X value of the viewport. Align the
	 * <code>min-y</code>+<code>height</code> of the element's viewBox with the maximum Y value of
	 * the viewport.
	 */
	xMaxYMax;

	/**
	 * Does not force uniform scaling. Scale the graphic content of the given element non-uniformly
	 * if necessary such that the element's bounding box exactly matches the viewport rectangle.
	 * Note that if <code>align</code> is none, then the optional <code>meetOrSlice</code> value is
	 * ignored.
	 */
	none;

}

enum ImageScale {
	/**
	 * Scales the graphic such that:
	 * <ul>
	 * <li>The aspect ratio is preserved.</li>
	 * <li>The entire viewBox is visible within the viewport.</li>
	 * <li>The viewBox is scaled up as much as possible, while still meeting the other
	 * criteria.</li>
	 * </ul>
	 * 
	 * <p>
	 * In this case, if the aspect ratio of the graphic does not match the viewport, some of the
	 * viewport will extend beyond the bounds of the viewBox (i.e., the area into which the viewBox
	 * will draw will be smaller than the viewport). meet
	 * </p>
	 */
	meet;

	/**
	 * Scales the graphic such that:
	 * 
	 * <ul>
	 * <li>The aspect ratio is preserved.</li>
	 * <li>The entire viewport is covered by the viewBox.</li>
	 * <li>The viewBox is scaled down as much as possible, while still meeting the other
	 * criteria.</li>
	 * </ul>
	 * 
	 * <p>
	 * In this case, if the aspect ratio of the viewBox does not match the viewport, some of the
	 * viewBox will extend beyond the bounds of the viewport (i.e., the area into which the viewBox
	 * will draw is larger than the viewport). slice
	 * </p>
	 */
	slice;

}

@Operations("com.top_logic.graphic.flow.operations.EmptyOperations")
message Empty extends Box {
	/** The minimum width of the element to allow to reserve some space. */
	double minWidth;
	
	/** The minimum height of the element to allow to reserve some space. */
	double minHeight;
}

@Operations("com.top_logic.graphic.flow.operations.DecorationOperations")
abstract message Decoration extends Box {
	Box content;
}

@Operations("com.top_logic.graphic.flow.operations.SelectableBoxOperations")
message SelectableBox extends Decoration {

	/** Whether this element is currently selected. */
	bool selected;
	
	transient com.top_logic.graphic.blocks.svg.event.Registration clickHandler;
	
}

@Operations("com.top_logic.graphic.flow.operations.AlignOperations")
message Align extends Decoration {
	Alignment xAlign;
	Alignment yAlign;
}

enum Alignment {
	start;
	middle;
	stop;
	strech;
}

@Operations("com.top_logic.graphic.flow.operations.BorderOperations")
message Border extends Decoration {
	string strokeStyle = "black";
	double thickness = 1.0;
	bool top = true;
	bool left = true;
	bool bottom = true;
	bool right = true;
	
	repeated double dashes;
}

@Operations("com.top_logic.graphic.flow.operations.FillOperations")
message Fill extends Decoration {
	string fillStyle = "black";
}

@Operations("com.top_logic.graphic.flow.operations.PaddingOperations")
message Padding extends Decoration {
	double top;
	double left;
	double bottom;
	double right;
}

@Operations("com.top_logic.graphic.flow.operations.layout.CompassLayoutOperations")
message CompassLayout extends Box {
	Box north;
	Box west;
	Box east;
	Box south;
	Box center;
	
	double centerHeight;
	double hPadding;
	double vPadding;
}

abstract message Layout extends Box {
	repeated Box contents;
}

@Operations("com.top_logic.graphic.flow.operations.layout.GridLayoutOperations")
message GridLayout extends Layout {
	int rows;
	int cols;
	double gapX;
	double gapY;
	repeated double rowHeight;
	repeated double colWidth;
}

abstract message RowLayout extends Layout {
	double gap;
	SpaceDistribution fill;
}

@Operations("com.top_logic.graphic.flow.operations.layout.HorizontalLayoutOperations")
message HorizontalLayout extends RowLayout {
}

@Operations("com.top_logic.graphic.flow.operations.layout.VerticalLayoutOperations")
message VerticalLayout extends RowLayout {
}

enum SpaceDistribution {
	NONE;
	STRETCH_CONTENT;
	STRETCH_GAP;
	STRETCH_ALL;
}