/* SearchExpressionParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. SearchExpressionParserTokenManager.java */
/*
 * SPDX-FileCopyrightText: 2018 (c) Business Operation Systems GmbH <info@top-logic.com>
 * 
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-BOS-TopLogic-1.0
 */
package com.top_logic.model.search.expr.parser;

/** Token Manager. */
@SuppressWarnings ("unused")
public class SearchExpressionParserTokenManager implements SearchExpressionParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x400000L) != 0L)
            return 87;
         if ((active1 & 0x1000L) != 0L)
            return 128;
         if ((active0 & 0xf380L) != 0L)
         {
            jjmatchedKind = 16;
            return 10;
         }
         return -1;
      case 1:
         if ((active0 & 0xf380L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
            return 10;
         }
         return -1;
      case 2:
         if ((active0 & 0xf380L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 2;
            return 10;
         }
         return -1;
      case 3:
         if ((active0 & 0x1280L) != 0L)
            return 10;
         if ((active0 & 0xe100L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
            return 10;
         }
         return -1;
      case 4:
         if ((active0 & 0x2100L) != 0L)
            return 10;
         if ((active0 & 0xc000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
            return 10;
         }
         return -1;
      case 5:
         if ((active0 & 0x4000L) != 0L)
            return 10;
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
            return 10;
         }
         return -1;
      case 6:
         if ((active0 & 0x8000L) != 0L)
            return 10;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 37:
         return jjStopAtPos(0, 77);
      case 40:
         return jjStopAtPos(0, 79);
      case 41:
         return jjStopAtPos(0, 80);
      case 42:
         return jjStopAtPos(0, 75);
      case 43:
         return jjStopAtPos(0, 73);
      case 44:
         return jjStopAtPos(0, 81);
      case 45:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 46:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 47:
         return jjStartNfaWithStates_0(0, 76, 128);
      case 58:
         return jjStopAtPos(0, 66);
      case 59:
         return jjStopAtPos(0, 84);
      case 60:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x80L);
      case 61:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 62:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 63:
         return jjStopAtPos(0, 65);
      case 91:
         return jjStopAtPos(0, 82);
      case 93:
         return jjStopAtPos(0, 83);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x3080L, 0x0L);
      case 123:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 34);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 46:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 61:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 62:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 123:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x300L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 123:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 10);
         break;
      case 108:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 10);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 10);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 10);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(8, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 165;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 128:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(135, 136); }
                  else if (curChar == 42)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     { jjCheckNAddStates(3, 7); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 25)
                        kind = 25;
                     { jjCheckNAddTwoStates(138, 140); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(8, 9); }
                  else if (curChar == 35)
                     { jjAddStates(10, 11); }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 84;
                  else if (curChar == 39)
                     { jjCheckNAddStates(12, 14); }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 34)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 87:
                  if (curChar == 34)
                     { jjCheckNAddStates(18, 20); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 3:
                  if (curChar == 38 && kind > 10)
                     kind = 10;
                  break;
               case 4:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 11:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
               case 30:
                  if (curChar == 39)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 15:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 16:
                  if (curChar == 39 && kind > 20)
                     kind = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 29:
                  if (curChar == 34)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 32:
               case 47:
                  if (curChar == 34)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 33:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 34:
                  if (curChar == 34 && kind > 20)
                     kind = 20;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 48:
                  if (curChar == 39)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 50:
                  if (curChar == 34)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 51:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 52:
                  if (curChar == 34 && kind > 21)
                     kind = 21;
                  break;
               case 53:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 34)
                     { jjCheckNAddStates(28, 32); }
                  break;
               case 56:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(51, 57); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
               case 69:
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(63); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 75:
                  if (curChar == 39)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 77:
                  if (curChar == 34)
                     { jjCheckNAdd(54); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 84:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 85:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 35)
                     { jjAddStates(10, 11); }
                  break;
               case 88:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 89:
                  if (curChar == 39 && kind > 22)
                     kind = 22;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 102:
                  if (curChar == 34)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 103:
                  if (curChar == 39)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 105:
               case 120:
                  if (curChar == 34)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 106:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 107:
                  if (curChar == 34 && kind > 22)
                     kind = 22;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 121:
                  if (curChar == 39)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 125:
                  if (curChar == 45)
                     { jjCheckNAdd(126); }
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAddTwoStates(125, 126); }
                  break;
               case 127:
                  if (curChar == 47)
                     { jjAddStates(8, 9); }
                  break;
               case 129:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 130:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 132:
                  if (curChar == 47 && kind > 5)
                     kind = 5;
                  break;
               case 133:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(135, 136); }
                  break;
               case 135:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(135, 136); }
                  break;
               case 136:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 137:
                  if (curChar != 48)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddTwoStates(138, 140); }
                  break;
               case 138:
                  if (curChar == 46)
                     { jjCheckNAdd(139); }
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 141:
                  if (curChar == 48 && kind > 27)
                     kind = 27;
                  break;
               case 142:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAdd(143); }
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAdd(143); }
                  break;
               case 144:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddStates(3, 7); }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddTwoStates(145, 146); }
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAddStates(33, 35); }
                  break;
               case 149:
                  if ((0xfbfffff6ffffc9ffL & l) != 0L)
                     { jjAddStates(36, 37); }
                  break;
               case 151:
                  if ((0xfbfffff6ffffc9ffL & l) != 0L)
                     { jjAddStates(38, 39); }
                  break;
               case 152:
                  if (curChar == 58)
                     { jjCheckNAdd(153); }
                  break;
               case 153:
                  if ((0xfbfffff6ffffc9ffL & l) != 0L)
                     { jjCheckNAddTwoStates(153, 154); }
                  break;
               case 155:
                  if ((0xfbfffff6ffffc9ffL & l) != 0L)
                     { jjAddStates(40, 41); }
                  break;
               case 156:
                  if (curChar == 58)
                     { jjCheckNAdd(157); }
                  break;
               case 157:
                  if ((0xfbfffff6ffffc9ffL & l) != 0L)
                     { jjCheckNAddTwoStates(157, 158); }
                  break;
               case 158:
                  if (curChar == 35)
                     { jjCheckNAdd(159); }
                  break;
               case 159:
                  if ((0xfbfffff6ffffc9ffL & l) != 0L)
                     { jjCheckNAddTwoStates(159, 160); }
                  break;
               case 161:
                  if ((0xfbfffff6ffffc9ffL & l) != 0L)
                     { jjAddStates(42, 43); }
                  break;
               case 162:
                  if (curChar == 35)
                     { jjCheckNAdd(163); }
                  break;
               case 163:
                  if ((0xfbfffff6ffffc9ffL & l) != 0L)
                     { jjCheckNAddTwoStates(163, 164); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 96)
                     { jjCheckNAddStates(44, 47); }
                  else if (curChar == 64)
                     { jjCheckNAdd(124); }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (curChar == 100 && kind > 10)
                     kind = 10;
                  break;
               case 1:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 5:
                  if (curChar == 114 && kind > 11)
                     kind = 11;
                  break;
               case 6:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 124 && kind > 11)
                     kind = 11;
                  break;
               case 8:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(10); }
                  break;
               case 12:
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAdd(13); }
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 17:
                  if (curChar == 92)
                     { jjAddStates(48, 56); }
                  break;
               case 18:
               case 19:
                  if (curChar == 117)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 24:
                  if (curChar == 102)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 25:
                  if (curChar == 114)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 26:
                  if (curChar == 110)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 27:
                  if (curChar == 98)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 28:
                  if (curChar == 116)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 31:
                  if (curChar == 92)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 35:
                  if (curChar == 92)
                     { jjAddStates(57, 65); }
                  break;
               case 36:
               case 37:
                  if (curChar == 117)
                     { jjCheckNAddTwoStates(37, 38); }
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 42:
                  if (curChar == 102)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 43:
                  if (curChar == 114)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 44:
                  if (curChar == 110)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 45:
                  if (curChar == 98)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 46:
                  if (curChar == 116)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 49:
                  if (curChar == 92)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 51:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 57:
                  if (curChar == 92)
                     { jjCheckNAddStates(66, 74); }
                  break;
               case 58:
               case 59:
                  if (curChar == 117)
                     { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
               case 69:
               case 83:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(63); }
                  break;
               case 63:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 64:
                  if (curChar == 92)
                     { jjCheckNAddStates(75, 83); }
                  break;
               case 65:
               case 66:
                  if (curChar == 117)
                     { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 67:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if (curChar == 102)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 71:
                  if (curChar == 114)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 72:
                  if (curChar == 110)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 73:
                  if (curChar == 98)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 74:
                  if (curChar == 116)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 76:
                  if (curChar == 92)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 78:
                  if (curChar == 92)
                     { jjCheckNAddStates(84, 92); }
                  break;
               case 79:
               case 80:
                  if (curChar == 117)
                     { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 81:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 88:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 90:
                  if (curChar == 92)
                     { jjAddStates(93, 101); }
                  break;
               case 91:
               case 92:
                  if (curChar == 117)
                     { jjCheckNAddTwoStates(92, 93); }
                  break;
               case 93:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 97:
                  if (curChar == 102)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 98:
                  if (curChar == 114)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 99:
                  if (curChar == 110)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 100:
                  if (curChar == 98)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 101:
                  if (curChar == 116)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 104:
                  if (curChar == 92)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 106:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 108:
                  if (curChar == 92)
                     { jjAddStates(102, 110); }
                  break;
               case 109:
               case 110:
                  if (curChar == 117)
                     { jjCheckNAddTwoStates(110, 111); }
                  break;
               case 111:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 115:
                  if (curChar == 102)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 116:
                  if (curChar == 114)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 117:
                  if (curChar == 110)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 118:
                  if (curChar == 98)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 119:
                  if (curChar == 116)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 122:
                  if (curChar == 92)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 123:
                  if (curChar == 64)
                     { jjCheckNAdd(124); }
                  break;
               case 124:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAddTwoStates(124, 125); }
                  break;
               case 126:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAddTwoStates(125, 126); }
                  break;
               case 129:
               case 131:
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 135:
                  { jjAddStates(111, 112); }
                  break;
               case 140:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(113, 114); }
                  break;
               case 145:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 96)
                     { jjCheckNAddStates(44, 47); }
                  break;
               case 149:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  break;
               case 150:
                  if (curChar == 96 && kind > 29)
                     kind = 29;
                  break;
               case 151:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(151, 152); }
                  break;
               case 153:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjAddStates(115, 116); }
                  break;
               case 154:
                  if (curChar == 96 && kind > 30)
                     kind = 30;
                  break;
               case 155:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(155, 156); }
                  break;
               case 157:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjAddStates(117, 118); }
                  break;
               case 159:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjAddStates(119, 120); }
                  break;
               case 160:
                  if (curChar == 96 && kind > 31)
                     kind = 31;
                  break;
               case 161:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(161, 162); }
                  break;
               case 163:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjAddStates(121, 122); }
                  break;
               case 164:
                  if (curChar == 96 && kind > 32)
                     kind = 32;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(12, 14); }
                  break;
               case 33:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(15, 17); }
                  break;
               case 51:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(24, 27); }
                  break;
               case 88:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(21, 23); }
                  break;
               case 106:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(18, 20); }
                  break;
               case 129:
               case 131:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 135:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(111, 112); }
                  break;
               case 149:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(36, 37); }
                  break;
               case 151:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(38, 39); }
                  break;
               case 153:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(115, 116); }
                  break;
               case 155:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(40, 41); }
                  break;
               case 157:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(117, 118); }
                  break;
               case 159:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(119, 120); }
                  break;
               case 161:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(42, 43); }
                  break;
               case 163:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(121, 122); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 165 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 50);
      default :
         return jjMoveNfa_2(5, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 0:
                  kind = 51;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(123, 125); }
                  break;
               case 0:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  kind = 51;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 1:
                  if (curChar == 92)
                     { jjAddStates(123, 125); }
                  break;
               case 2:
                  if (curChar != 92)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 3:
                  if (curChar != 123)
                     break;
                  kind = 51;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 4:
                  if (curChar != 125)
                     break;
                  kind = 51;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 62);
      case 123:
         return jjStopAtPos(0, 61);
      default :
         return jjMoveNfa_4(6, 0);
   }
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 0:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  kind = 63;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 3:
                  if (curChar != 34)
                     break;
                  kind = 63;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(126, 129); }
                  break;
               case 0:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  kind = 63;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 1:
                  if (curChar == 92)
                     { jjAddStates(126, 129); }
                  break;
               case 2:
                  if (curChar != 92)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 4:
                  if (curChar != 123)
                     break;
                  kind = 63;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 5:
                  if (curChar != 125)
                     break;
                  kind = 63;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 58);
      case 47:
         return jjMoveStringLiteralDfa1_3(0x1000000000000000L);
      case 61:
         return jjStopAtPos(0, 57);
      case 62:
         return jjStopAtPos(0, 59);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 56;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 41);
      case 125:
         return jjMoveStringLiteralDfa1_1(0x400000000000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 125:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 125:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 69;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     { jjCheckNAddTwoStates(3, 4); }
                  }
                  else if (curChar == 60)
                     { jjAddStates(130, 133); }
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if ((0xefffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 6:
                  if (curChar != 60)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 9:
                  if (curChar == 60)
                     { jjAddStates(130, 133); }
                  break;
               case 10:
                  if (curChar == 45)
                     { jjCheckNAddStates(134, 136); }
                  break;
               case 11:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     { jjCheckNAddStates(134, 136); }
                  break;
               case 12:
                  if (curChar == 45)
                     { jjCheckNAdd(11); }
                  break;
               case 13:
                  if (curChar == 45)
                     { jjAddStates(137, 139); }
                  break;
               case 14:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     { jjCheckNAddStates(134, 136); }
                  break;
               case 16:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(134, 136); }
                  break;
               case 18:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 62 && kind > 38)
                     kind = 38;
                  break;
               case 20:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 23:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 45)
                     { jjCheckNAddStates(140, 142); }
                  break;
               case 25:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     { jjCheckNAddStates(140, 142); }
                  break;
               case 26:
                  if (curChar == 45)
                     { jjCheckNAdd(25); }
                  break;
               case 27:
                  if (curChar == 45)
                     { jjAddStates(143, 144); }
                  break;
               case 28:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(140, 142); }
                  break;
               case 30:
                  if (curChar == 62 && kind > 40)
                     kind = 40;
                  break;
               case 31:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 33:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(145, 146); }
                  break;
               case 37:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(147, 148); }
                  break;
               case 38:
                  if (curChar == 61)
                     { jjCheckNAddTwoStates(39, 56); }
                  break;
               case 39:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(39, 56); }
                  break;
               case 40:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 41:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 42:
                  if (curChar == 62 && kind > 42)
                     kind = 42;
                  break;
               case 51:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 56:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 65:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(149, 150); }
                  break;
               case 68:
                  if (curChar == 62 && kind > 44)
                     kind = 44;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     { jjCheckNAddTwoStates(3, 4); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(151, 154); }
                  break;
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 4:
                  if (curChar == 92)
                     { jjAddStates(151, 154); }
                  break;
               case 5:
                  if (curChar != 92)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 7:
                  if (curChar != 123)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 8:
                  if (curChar != 125)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 11:
               case 15:
               case 17:
                  { jjCheckNAddStates(134, 136); }
                  break;
               case 25:
               case 29:
                  { jjCheckNAddStates(140, 142); }
                  break;
               case 34:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if (curChar == 101)
                     { jjAddStates(147, 148); }
                  break;
               case 43:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 52:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 58:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 61:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(67, 68); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 11:
               case 15:
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(134, 136); }
                  break;
               case 25:
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(140, 142); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 69 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\164\162\165\145", 
"\146\141\154\163\145", "\156\165\154\154", null, null, "\164\150\151\163", "\164\165\160\154\145", 
"\163\167\151\164\143\150", "\144\145\146\141\165\154\164", null, "\56\56", "\56", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\173", "\175", 
"\74\57\163\143\162\151\160\164\76", "\173\173\173", null, null, null, null, "\173", null, null, null, null, 
"\175\175\175", null, null, null, "\173", null, null, null, null, null, null, "\75", "\42", 
"\76", "\57\76", "\173", "\42", null, "\55\76", "\77", "\72", "\75\75", "\41\75", 
"\76\75", "\76", "\74\75", "\74", "\53", "\55", "\52", "\57", "\45", "\41", "\50", 
"\51", "\54", "\133", "\135", "\73", "\75", "\43\50", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   129, 130, 133, 145, 146, 147, 138, 140, 128, 134, 87, 105, 15, 16, 17, 33, 
   34, 35, 106, 107, 108, 88, 89, 90, 51, 54, 55, 64, 51, 56, 77, 54, 
   78, 147, 138, 140, 149, 150, 151, 152, 155, 156, 161, 162, 149, 151, 155, 161, 
   18, 24, 25, 26, 27, 28, 29, 30, 31, 36, 42, 43, 44, 45, 46, 47, 
   48, 49, 58, 70, 71, 72, 73, 74, 50, 75, 76, 65, 70, 71, 72, 73, 
   74, 50, 75, 76, 79, 70, 71, 72, 73, 74, 50, 75, 76, 91, 97, 98, 
   99, 100, 101, 102, 103, 104, 109, 115, 116, 117, 118, 119, 120, 121, 122, 135, 
   136, 141, 142, 153, 154, 157, 158, 159, 160, 163, 164, 2, 3, 4, 2, 3, 
   4, 5, 23, 33, 64, 65, 11, 12, 13, 14, 18, 21, 25, 26, 27, 28, 
   31, 35, 59, 37, 38, 67, 68, 5, 6, 7, 8, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SearchExpressionParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public SearchExpressionParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 165; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "HTML",
   "TEXT",
   "TAG",
   "ATTR_CONTENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 0, 3, -1, -1, 0, -1, -1, -1, 
   0, -1, -1, -1, -1, -1, -1, -1, 4, 1, 1, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xff0cde1feaffff81L, 0x7fffffL, 
};
static final long[] jjtoSkip = {
   0xf001400000007eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[165];
    private final int[] jjstateSet = new int[2 * 165];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
