model.tl.bpe = Business Process Engine
model.tl.bpe.bpml = BPML Model
model.tl.bpe.bpml.Annotated = Annotated
model.tl.bpe.bpml.Annotated.annotationAssociations = Annotation links
model.tl.bpe.bpml.AnnotationAssociation = AnnotationAssociation
model.tl.bpe.bpml.AnnotationAssociation.source = Annotated element
model.tl.bpe.bpml.AnnotationAssociation.target = Annotation
model.tl.bpe.bpml.AnnotationContainer = AnnotationContainer
model.tl.bpe.bpml.AnnotationContainer.annotationDefinitions = Annotations
model.tl.bpe.bpml.ApprovalState = Workflow state
model.tl.bpe.bpml.ApprovalState.Development = Development
model.tl.bpe.bpml.ApprovalState.Released = Released
model.tl.bpe.bpml.ApprovalState.Retired = Retired
model.tl.bpe.bpml.BPTimeGranularity = Time granularity
model.tl.bpe.bpml.BoundaryEvent = BoundaryEvent
model.tl.bpe.bpml.BoundaryEvent.attachedTo = Attached to
model.tl.bpe.bpml.BoundaryEvent.cancelActivity = BoundaryEvent.cancelActivity
model.tl.bpe.bpml.BusinessRuleTask = BusinessRuleTask
model.tl.bpe.bpml.CallActivity = CallActivity
model.tl.bpe.bpml.CancelEventDefinition = Cancel
model.tl.bpe.bpml.Collaboration = Collaboration
model.tl.bpe.bpml.Collaboration.diagram = Diagram
model.tl.bpe.bpml.Collaboration.messageFlows = Message flows
model.tl.bpe.bpml.Collaboration.myProcessesDescriptionI18N = "My processes" description
model.tl.bpe.bpml.Collaboration.myProcessesDescriptionI18N.tooltip = Description to be displayed on the "My processes" tile in the generic workflow view.
model.tl.bpe.bpml.Collaboration.myProcessesIcon = "My processes" icon
model.tl.bpe.bpml.Collaboration.myProcessesIcon.tooltip = Image to be displayed on the "My processes" tile in the generic workflow view.
model.tl.bpe.bpml.Collaboration.myProcessesTitleI18N = "My processes" title
model.tl.bpe.bpml.Collaboration.myProcessesTitleI18N.tooltip = Alternative title for the "My processes" tile in the generic workflow view.
model.tl.bpe.bpml.Collaboration.myTasksDescriptionI18N = "My tasks" description
model.tl.bpe.bpml.Collaboration.myTasksDescriptionI18N.tooltip = Description to be displayed on the "My tasks" tile in the generic workflow view.\ 
model.tl.bpe.bpml.Collaboration.myTasksIcon = "My tasks" icon
model.tl.bpe.bpml.Collaboration.myTasksIcon.tooltip = Image to be displayed on the "My tasks" tile in the generic workflow view.
model.tl.bpe.bpml.Collaboration.myTasksTitleI18N = "My tasks" title
model.tl.bpe.bpml.Collaboration.myTasksTitleI18N.tooltip = Alternative title for the "My tasks" tile in the generic workflow view.
model.tl.bpe.bpml.Collaboration.participants = Participants
model.tl.bpe.bpml.Collaboration.processes = Processes
model.tl.bpe.bpml.Collaboration.state = State
model.tl.bpe.bpml.CompensateEventDefinition = Compensate
model.tl.bpe.bpml.ComplexGateway = ComplexGateway
model.tl.bpe.bpml.ConditionalEventDefinition = Conditional
model.tl.bpe.bpml.DefaultGateway = DefaultGateway
model.tl.bpe.bpml.DefaultGateway.defaultFlow = Default flow
model.tl.bpe.bpml.Described = Described
model.tl.bpe.bpml.Described.descriptionI18N = Description
model.tl.bpe.bpml.Described.tooltip = Abstract generic type for all components of a workflow that can contain a description.
model.tl.bpe.bpml.DisplayDescription = DisplayDescription
model.tl.bpe.bpml.Edge = Edge
model.tl.bpe.bpml.Edge.label = Label
model.tl.bpe.bpml.Edge.label.tooltip = Name of the edge as it should be displayed to a user during workflow processing (e.g. when making a decision or as text on a button).
model.tl.bpe.bpml.Edge.process = Process
model.tl.bpe.bpml.Edge.source = Source
model.tl.bpe.bpml.Edge.target = Target
model.tl.bpe.bpml.Edge.title = Title
model.tl.bpe.bpml.Edge.title.tooltip = Name of the edge as it should be displayed to a user during workflow processing (e.g. when making a decision or as text on a button).
model.tl.bpe.bpml.Edge.tooltip = Tooltip
model.tl.bpe.bpml.Edge.tooltip.tooltip = Further instructions to be displayed to the user of the workflow for this transition. The instructions should make the consequences of any decision to be made clear to the user.
model.tl.bpe.bpml.Edge.weight = Weight
model.tl.bpe.bpml.Edge.weight.tooltip = A weight that determines the order of the edge in a selection dialog for a user decision. The higher the number, the further down the edge is sorted in the decision list. All edges that have a weight are displayed before edges without a weight.
model.tl.bpe.bpml.EndEvent = EndEvent
model.tl.bpe.bpml.ErrorEventDefinition = Error
model.tl.bpe.bpml.EscalationEventDefinition = Escalation
model.tl.bpe.bpml.Event = Event
model.tl.bpe.bpml.Event.definition = Definition
model.tl.bpe.bpml.EventBasedGateway = EventBasedGateway
model.tl.bpe.bpml.EventDefinition = EventDefinition
model.tl.bpe.bpml.EventDefinition.event = Event
model.tl.bpe.bpml.ExclusiveGateway = ExclusiveGateway
model.tl.bpe.bpml.ExclusiveGateway.automatic = Automatic
model.tl.bpe.bpml.Externalized = Externalized
model.tl.bpe.bpml.Externalized.extId = Diagram ID
model.tl.bpe.bpml.FlowSource = FlowSource
model.tl.bpe.bpml.FlowTarget = FlowTarget
model.tl.bpe.bpml.Gateway = Gateway
model.tl.bpe.bpml.Iconified = Iconified
model.tl.bpe.bpml.Iconified.icon = Icon
model.tl.bpe.bpml.Iconified.tooltip = Abstract generic type for all components of a workflow that can be represented with an icon.
model.tl.bpe.bpml.InclusiveGateway = InclusiveGateway
model.tl.bpe.bpml.IntermediateCatchEvent = IntermediateCatchEvent
model.tl.bpe.bpml.IntermediateEvent = IntermediateEvent
model.tl.bpe.bpml.IntermediateMessageThrowEvent = IntermediateMessageThrowEvent
model.tl.bpe.bpml.IntermediateThrowEvent = IntermediateThrowEvent
model.tl.bpe.bpml.Lane = Lane
model.tl.bpe.bpml.Lane.nodes = Nodes
model.tl.bpe.bpml.Lane.owner = Owner
model.tl.bpe.bpml.Lane.title = Title
model.tl.bpe.bpml.Lane.title.tooltip = Name of the lane as it should be displayed to a user during workflow processing.
model.tl.bpe.bpml.LaneSet = LaneSet
model.tl.bpe.bpml.LaneSet.actorGroups = Actor group
model.tl.bpe.bpml.LaneSet.actorRule = Actor function
model.tl.bpe.bpml.LaneSet.actorRule.tooltip = Function taking the process instance as single argument and computing the set of actors (persons or groups).
model.tl.bpe.bpml.LaneSet.lanes = Lanes
model.tl.bpe.bpml.ManualTask = ManualTask
model.tl.bpe.bpml.ManualTask.canEdit = Editable
model.tl.bpe.bpml.ManualTask.canEdit.tooltip = Whether the form can be edited in this process step. If not, it is only used to display the status of the current process object.
model.tl.bpe.bpml.ManualTask.displayDescription = Display description
model.tl.bpe.bpml.ManualTask.formDefinition = Form
model.tl.bpe.bpml.ManualTask.formDefinition.tooltip = Form for this process step. This form is displayed to a user who is assigned as the processor for this process step.
model.tl.bpe.bpml.MessageEventDefinition = Message
model.tl.bpe.bpml.MessageFlow = MessageFlow
model.tl.bpe.bpml.MessageFlow.collaboration = Collaboration
model.tl.bpe.bpml.MessageFlow.connectExpession = Connect expession
model.tl.bpe.bpml.MessageFlow.connectExpession.tooltip = Function with two arguments (sending process instance and receiving process instance) with the side-effect of linking both process instances.
model.tl.bpe.bpml.MessageFlow.source = Source
model.tl.bpe.bpml.MessageFlow.target = Target
model.tl.bpe.bpml.Named = Named
model.tl.bpe.bpml.Named.name = Name
model.tl.bpe.bpml.Named.name.tooltip = Technical name of the diagram element.
model.tl.bpe.bpml.Node = Node
model.tl.bpe.bpml.Node.incomming = Incomming
model.tl.bpe.bpml.Node.lane = Lane
model.tl.bpe.bpml.Node.outgoing = Outgoing
model.tl.bpe.bpml.Node.process = Process
model.tl.bpe.bpml.ParallelGateway = ParallelGateway
model.tl.bpe.bpml.Participant = Participant
model.tl.bpe.bpml.Participant.collaboration = Collaboration
model.tl.bpe.bpml.Participant.defaultOperation = Default operation
model.tl.bpe.bpml.Participant.defaultOperation.tooltip = Operation that is executed additionally at each step in the workflow. The function receives four arguments, the process object, the old task, the new task (if available) and the form data of the selection dialog for the next task. If no form type is defined for the transition, the last argument is zero. If several parallel tasks are started, the third argument is a set with all subsequent tasks. If the process execution encounters an end event, no new task is created.
model.tl.bpe.bpml.Participant.displayDescription = Display description
model.tl.bpe.bpml.Participant.dynamicName = Test ID
model.tl.bpe.bpml.Participant.dynamicName.tooltip = Function computing an identifier of a task used in test scripts.
model.tl.bpe.bpml.Participant.edgeFormType = Form model
model.tl.bpe.bpml.Participant.edgeFormType.tooltip = Der Typ, der das Formular beschreibt, das bei einem Zustandsübergang aus einer manuellen Aufgabe heraus dem Nutzer angezeigt werden soll. Für Attribute dieses Typs werden Eingabefelder in dem Forumar angezeigt, das sonst nur die nächste Aufgabe zur Auswahl stellt.
model.tl.bpe.bpml.Participant.exportDescription = Export description
model.tl.bpe.bpml.Participant.modelType = Model type
model.tl.bpe.bpml.Participant.modelType.tooltip = Type of the process-controlled object (process execution). An instance of this type is created when a process is started.
model.tl.bpe.bpml.Participant.process = Process
model.tl.bpe.bpml.Participant.taskLabel = Dynamic task description
model.tl.bpe.bpml.Participant.taskLabel.tooltip = Function that calculates the name of a task in workflow views if no name is configured on the task itself.\n\nThe function receives two arguments, the process execution and the current task.
model.tl.bpe.bpml.Participant.tokenType = State type
model.tl.bpe.bpml.Participant.tokenType.tooltip = The type of object that describes the status of a process execution in the current task. \n\nThe history of a process execution is made up of the list of all status objects that were created during the course of the process execution. In each of these objects, at least the duration of the process in this task and the processor of the task are saved. \n\nBy specifying a separate type for the status object, further information can be collected during the course of the process that is not directly linked to the process object itself.
model.tl.bpe.bpml.Process = Process
model.tl.bpe.bpml.Process.collaboration = Collaboration
model.tl.bpe.bpml.Process.edges = Edges
model.tl.bpe.bpml.Process.isExecutable = Is executable
model.tl.bpe.bpml.Process.nodes = Nodes
model.tl.bpe.bpml.Process.participant = Participant
model.tl.bpe.bpml.ProcessFormDefinition = [missing:model.tl.bpe.bpml.ProcessFormDefinition]
model.tl.bpe.bpml.ReceiveTask = ReceiveTask
model.tl.bpe.bpml.ScriptTask = ScriptTask
model.tl.bpe.bpml.SendTask = SendTask
model.tl.bpe.bpml.SendTask.contentTemplate = Content
model.tl.bpe.bpml.SendTask.contentTemplate.tooltip = Text with embedded expressions. The variable $model contains the current task.
model.tl.bpe.bpml.SendTask.receiverGroups = Receiver groups
model.tl.bpe.bpml.SendTask.receiverRule = Receiver rule
model.tl.bpe.bpml.SendTask.receiverRule.tooltip = Function computing the receivers (persons). The function takes the current process instance as single argument.
model.tl.bpe.bpml.SendTask.subjectTemplate = Subject
model.tl.bpe.bpml.SendTask.subjectTemplate.tooltip = Text with embedded expressions. The variable $model contains the current task.
model.tl.bpe.bpml.SequenceFlow = SequenceFlow
model.tl.bpe.bpml.SequenceFlow.formType = Form type
model.tl.bpe.bpml.SequenceFlow.formType.tooltip = Model for the form that is displayed during the state transition from a manual task. This form receives the associated operation to process the entered values further. If a form type is specified, an operation must also be specified, otherwise the values entered will not be taken into account.
model.tl.bpe.bpml.SequenceFlow.operation = Operation
model.tl.bpe.bpml.SequenceFlow.operation.tooltip = Operation to be executed if the workflow runs via this edge. An operation can only be specified on edges that start from a manual task. Specifying an operation is equivalent to modeling a service task. An operation on an edge simplifies the diagram and does not create any additional entries in the process execution history. The function receives four arguments, the process object, the old task, the new task (if available) and the form data of the selection dialog for the next task. If no form type is defined for the transition, the last argument is zero. If several parallel tasks are started, the third argument is a set with all subsequent tasks.
model.tl.bpe.bpml.SequenceFlow.rule = Rule
model.tl.bpe.bpml.SequenceFlow.rule.tooltip = Predicate function testing whether the sequence flow can be executed. The process instance is given as single argument. The function is expected to return a boolean value or an (internationalized) error text describing the error.
model.tl.bpe.bpml.SequenceFlowRule = [missing:model.tl.bpe.bpml.SequenceFlowRule]
model.tl.bpe.bpml.ServiceTask = ServiceTask
model.tl.bpe.bpml.ServiceTask.action = Action
model.tl.bpe.bpml.ServiceTask.action.tooltip = Operation to execute. The function takes the current process instance as single argument.
model.tl.bpe.bpml.SignalEventDefinition = Signal
model.tl.bpe.bpml.StartEvent = StartEvent
model.tl.bpe.bpml.StartEvent.requireReview = Require review
model.tl.bpe.bpml.StartEvent.requireReview.tooltip = When enabled, the workflow will stay in the initial state after creation. When disabled, it will automatically advance to the next state upon creation.
model.tl.bpe.bpml.StartEvent.title = Title
model.tl.bpe.bpml.StartEvent.title.tooltip = Title of the start event as it should be displayed to a user during workflow processing.
model.tl.bpe.bpml.SubProcess = SubProcess
model.tl.bpe.bpml.Task = Task description
model.tl.bpe.bpml.Task.boundaryEvents = Boundary Events
model.tl.bpe.bpml.Task.label = Label
model.tl.bpe.bpml.Task.label.tooltip = Name of the task as it is displayed to a user when an abstract task is displayed without a context (a concrete process execution). Normally, however, a concrete task is displayed in a concrete process execution (e.g. in a heading or a tile) rather than an abstract task of the workflow.
model.tl.bpe.bpml.Task.labelFunction = Label function
model.tl.bpe.bpml.Task.labelFunction.tooltip = Dynamic calculation of the name of a task as it should be displayed to a user during workflow processing. The process model and the current task can be included in the calculation. A function with three arguments is expected. The current process execution (instance of `tl.bpe.execution:ProcessExecution`) is passed as the first argument, the currently processed task (`tl.bpe.bpml:Task`) as the second argument and the current process step (`tl.bpe.execution:Token`) as the third argument.
model.tl.bpe.bpml.Task.titleFunction = Dynamic title
model.tl.bpe.bpml.Task.titleFunction.tooltip = Function to calculate the title of a task. The process model and the current task can be included in the calculation. \n\nA function with up to four arguments is expected: The specified static title is available as the first argument. This is followed by the current process execution (instance of `tl.bpe.execution:ProcessExecution`), the task currently being processed (`tl.bpe.bpml:Task`) and, as the last argument, the current process step (`tl.bpe.execution:Token`). \n\nIf no dynamic title is specified, the effect is the same as if the following function were specified: i18n -> execution -> task -> token -> $i18n.localize($execution, $task, $token)
model.tl.bpe.bpml.Task.titleI18N = Title
model.tl.bpe.bpml.Task.titleI18N.tooltip = Name of the task as it should be displayed to a user during workflow processing (e.g. in a heading). \n\nIf no dynamic name is specified, a placeholder ({0}) in the text is filled with the underlying process instance.
model.tl.bpe.bpml.Task.tokenType = State type
model.tl.bpe.bpml.Task.tokenType.tooltip = The type of object that describes the status of a process execution in the current task. \n\nThe history of a process execution is made up of the list of all status objects that were created during the course of the process execution. In each of these objects, at least the duration of the process in this task and the processor of the task are saved. \n\nBy specifying a separate type for the status object, further information can be collected during the course of the process that is not directly linked to the process object itself.
model.tl.bpe.bpml.Task.tooltip = Abstract superordinate type for all states in a workflow description. An active process execution is in one or more of these states. The combination of abstract task description and process execution object results in the concrete task. Depending on the concrete task description, such a concrete task must either be carried out by a user of the system in the application, or it is carried out automatically or time-controlled by the system.
model.tl.bpe.bpml.TerminateEventDefinition = Terminate
model.tl.bpe.bpml.TextAnnotation = TextAnnotation
model.tl.bpe.bpml.TextAnnotation.annotationAssociations = Annotation links
model.tl.bpe.bpml.TextAnnotation.text = Text
model.tl.bpe.bpml.TimerEventDefinition = Timer
model.tl.bpe.bpml.TimerEventDefinition.delayInMillis = Delay
model.tl.bpe.bpml.TimerEventDefinition.delayInUnit = Delay
model.tl.bpe.bpml.TimerEventDefinition.timeUnit = Time unit
model.tl.bpe.bpml.UserTask = UserTask
